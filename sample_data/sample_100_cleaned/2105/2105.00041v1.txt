certified analysis software productline safety casesramy shahin1 sahar kokaly2 marsha chechik1arxiv210500041v1 csse 30 apr 2021university toronto toronto canadarshahinchechikcstorontoedugeneral motors canadasaharkokalygmcomabstract safetycritical software systems cases designedimplemented families products usually referred softwareproduct lines spls products spl varyterms features include applying existing analysis techniques spls safety cases usually challengingpotentially exponential number products respect numbersupported features paper present methodology infrastructure certified lifting existing singleproduct safety analysesproduct lines ensure certified safety infrastructure implement interactive theorem prover including formal definitionslemmas correctness criteria theorems proofsapply infrastructure formalize lift change impact assessment cia algorithm present formal definition liftedalgorithm outline correctness proof machinecheckedproof available online discuss implementation modelmanagement frameworkkeywords safety cases product lines lean certified analysisintroductiondevelopment safetycritical systems usually involves rigorous safety engineering process primary artifact resulting safety case identifying potential safety hazards mitigation goals pieces evidencerequired goals achieved safety casesartifacts usually inspected analyzed toolssafety engineering process safetycritical domains correctness toolsessential integrity process correctness certification toolswrt specifications extremely high value contextcases families safetycritical software products developedform software product lines spls different product variantsspl different features externally visible attributes piecefunctionality support particular peripheral device performanceoptimization feature present absent productvariants spl given combinatorial nature feature compositionanalyzing safety product instance individually bruteforce fashionusually intractableramy shahin sahar kokaly marsha chechikfig 1 lifted change impact assessment visual class modifieddashed ellipse visual class denotes modification dashed ellipsessafety case elements indicate need rechecked resultsourcecode modelbased analysis tools lifted product lines 2412920252322 sense applied efficientlyproduct line leveraging commonalities individual products generating aggregated results complete setproducts results correct respect applying analysisproduct individually best knowledge liftingsafety analyses attemptedpaper present systematic methodology correctbyconstructionlifting safety case analysis algorithms software product lines includesinfrastructure building blocks implementing lifted algorithms provingcorrectness respect singleproduct counterparts uselean interactive theorem prover 18 formalize correctness criteria lifting implement lifting infrastructure prove correctness lifted algorithms lean proof machinechecked correctnesscertificate property provendemonstrate approach change impact assessment cia algorithm 15 takes model assurance case traceability linksmodification model inputs determinesset safety case elements need revised recheckedmotivating example consider lane management lmsoutlined 4 lms thought product line featuresincluding lane departure warning ldws audio warning audiovisual warning visual simplicity presentation assumefeature combinations allowed fig 1 shows snippet class diagramlms product line corresponding snippet gsn 13 assurancecase traceability linksuse colored annotations map class diagram gsn elements features example elements colored green belong audio featurecertified analysis software product line safety casesorange belong ldws feature base elements existingproducts yellow general element annotated propositional formula features usually referred presence conditionconsider modification visual class problem cia algorithmstry solve figuring modification elementimpact safety case distinguish ways changeimpact safety case elements 15 1 revise contentelement definition goal description solutionrevised referred element changedsemantics content changed 2 recheck stateelement goal satisfied solution availablerechecked changedproduct line setting addition figuring elementsimpacted need identify product variantsfig 1 goals g19 g20 directly impacted modifications class visualdirect traceability links classes need recheckedresult products visual feature included setproducts pieces evidence linked goals sn4 sn11 sn18 needrechecked note g20 sn4 sn18 belong productvariants need recheck product variants includingvisual featurecia tool lifted product lines preserve exact semanticssingleproduct counterpart words lifted tool outputexactly union outputs singleproduct tool applied productvariant software bug lifted tool result false positives elementsmarked impacted worse bug resultoverlooking impacted element potentially resulting safety incidentscontributions paper 1 outline methodology lifting safetyanalyses safety cases software product lines present generic infrastructure certified lifting data structures correctness criterialean interactive theorem prover 2 demonstrate methodology ciaalgorithm lifted software product lines supporting input featurespecific modifications outputting featurespecific annotations safety caseelements addition 3 formalize singleconfiguration cia algorithm15 lean 4 outline sketch correctness proof liftedcia algorithm respect singleconfiguration lean proof available online 5 discuss extending mminta 7 model managementframework lifted safety algorithms including lifted ciaorganization rest paper organized follows sec 2provide background safety cases spls outline correctness criteriamethodology infrastructure needed formally lift safety case algorithmssec 3 sec 4 formalize original singleconfiguration cia algorithmlifted counterpart outline lifting correctness proof sec 5 explainslifted algorithms integrated existing model management toolssec 6 compares approach related work sec 7 concludesramy shahin sahar kokaly marsha chechikbackground21 safety cases gsn change impact assessmentsafety case structured argument decomposing safety goals subgoalslinking pieces safety evidence goals safety goals usually identified hazard assessment techniques hazards needs mitigated fulfilling safety goalsgoal structured notation gsn 13 graphical notation definingsafety cases safety case portion fig 1 example gsn safetycase model gsn model elements different types goalsatisfied based states subgoals connected solution nodessemantics decomposition strategy nodes involved solution pieceevidence needs validated connected goals satisfiedstrategy decomposition goal subgoals context connectedgoal node adds contextual assumptions assumed hold evaluatinggoal satisfiedgsnia 15 algorithm reflecting changes modelsrelevant gsn safety cases inputs gsnia initialmodel s safety case connected traceability mapping r changeds 0 delta d recording changes s s 0 specificallyd triple hc 0a c 0d c 0mi c 0a c 0d c 0m setelements added deleted modified respectively output gsniaannotated model k safety case indicating elementsmarked revise recheck reusegsnia parameterized slicers 21 model slicer slicesyssafety case slicers slicegsnv slicegsnr slicesys determine impact modifications propagates modelsimilarly safety case slicers trace dependencies safetycase slicegsnv tracing direct dependencies slicegsnr recursively generates transitive closure dependencies22 software product linesintroduce software product line spl concepts following definitions 20spl l tuple f d 1 f set features st individual product derived l feature configuration f 2propf propositional formula f defining valid set featureconfigurations called feature model fm set valid configurationsdefined called confl 3 d set program elements calleddomain model set program elements usually referred150 representation 4 d propf total function mappingprogram element proposition feature expression defined setfeatures f e called presence condition pc element e setproduct configurations e presentgiven product line l feature configuration define lsubset elements l belong featuresloosely use indexing operator referring subsets valuesdata structure subject feature configuration example given featurecertified analysis software product line safety casesdef pc propstructure var type v pc pcdef set0 type type pcdef index s set0 pc pc set pc sdef mem x var s set0 prop xpc s xvdef subset s1 s2 set0 prop mem s1 mem s2def union s1 s2 set0 set0 x s1 x s2 xdef image f s set0 set0 x y f y x s ylisting 1 variabilityaware building blocksconfiguration ldws visual product elementsones annotated green instantiated product line fig 1methodology infrastructuresection present set generic infrastructure building blocksdesigning certifying correctness variabilityaware algorithmsapplied safety cases present correctness criteria variabilityaware algorithms respect singleproduct counterparts finallyinfrastructure correctness criteria correctbyconstruction methodology systematic lifting safety case algorithmsformalize algorithms theorems proofs lean 18 interactive theorem prover requirements proof assistantproject 1 based constructive classical logic allow explicit tracing subgoals proof evidence contributeoverall proof 2 allow sound userdefined proof automationprocedures reduce human effort involved proof development process lean meets requirements based calculusinductive constructions 1 supports constructive logic defaultsupports tacticbased metaprogramming theorems proof objectslifted data structures types input output intermediatedata structures algorithm need lifted elementsdata structures need paired presence conditions indicating setproducts element belongs listing 1 definitionsdata types lifted data structures pc line 1 type presenceconditions defined native lean propositions var line 2 higherorder lifted type taking type parameter pairing values typepresence conditionslifted set data type set0 line 3 higherorder type parameterizedtype implemented function pc implementation happensimplementation lean sets semantics leansets assume value type present absent set liftedsets hand map element type arbitrary propositionalformula evaluate true element exists setconfigurations false element exist configurationset contingent formula indicating set configurationselement exists setramy shahin sahar kokaly marsha chechikcorrectness lifted function 22 b correctness lifted function compositionfig 2 lifting correctness criteriavariables f set set g set setvariables f0 set0 set0 g0 set0 set0theorem funcompcorrectf f0 b g b g0 bg f g0 f0listing 2 lifted function composition theoremprimary operation lifted data types general indexing givenlifted set s presence condition pc index s pc evaluates lean setlifted elements existing configurations satisfied pc sexactly index operator defined set0 conjoining pcpresence condition element s line 4standard set operations need overloaded lifted sets liftedset membership semantically checks lifted value vpc exists configurations lifted set s defined line 5 propositional implicationpc set configurations lifted value exists setconfigurations v exists slifted subset defined exactly standard subset lifteddefinition set membership line 6 similarly lifted set union implementeddisjunction propositional definitions arguments line 7lifted set operation image line 8 taking function flifted set s applies f element s returning lifted setcorrectness criteria given product line l analysis algorithm fproduct configuration construct lifted version f referred f 0instantiating product p l configurationapplying f p result applying f 0 l instantiatingproductspecific result summarized commuting diagramfig 2a 22lifting methodology follow divideandconquer methodology designlifted analyses singleproduct counterparts analysis algorithmbrokendown smaller functions functions individuallylifted composing lifted functions preserve correctnesscriteria summarized fig 2bformulate correctness criteria lifted function compositiontheorem listing 2 assume functions fset setgset set lifted functions f0 set0 set0 g0 set0set0 line 2 theorem states f0 correct lifting fg0 correct lifting g g0 f0 correct lifting g f lines 35certified analysis software product line safety casesinductive annotation typereuse recheck reviseconstants sysel gsnel typedef systype set syseldef gsntype set gsneldef tracerel type set sysel gsnelvariable slicesys s sys es set sysel sysvariable slicegsnv ac gsn es set gsnel gsnvariable slicegsnr ac gsn es set gsnel gsnstructure delta add set sysel delete set sysel modify set sysellisting 3 type definitions formalized gsn ia algorithmtheorem proven term rewriting definitions theorems lemmaslean proofs available online3correctness lifted function composition theorem foundationcompositional lifting correctness proofs small helper functions manuallylifted proven correct relatively easily correctness proofscomposed composing functions theoremway lifted analyses compositionally implemented followingstructure singleproduct counterparts composing correctness proofs function composition demonstrate methodology liftingchange impact assessment cia algorithm sec 4changed impact assessmentsection formalize gsnia 15 impact assessment algorithm systematically design lifted version prove correctness basedmethodology sec 341 singleproduct algorithmdata types external dependencies gsn ia algorithm definedlisting 3 annotation data type annotations assigned gsn modelelements values reuse recheck revise lines 12 syselgsnel opaque types model elements gsn model elementsrespectively model sys gsn model gsn setselements types lines 46 tracerel traceability relation model elements gsn model elements definedset ordered pairs sysel gsnel line 7 gsn ia parameterizedmodel slicers slicesys model slicer slicegsn vslicegsn r gsn model slicers slicers takes model setelements slicing criterion returning subset slice input modellines 911 delta composed sets elements representingelements added modified deleted lines 12listing 4 definitions gsn ia algorithmhelper functions restrict function taking traceability relation thttpsgithubcomramyshahinvariabilityramy shahin sahar kokaly marsha chechikdef restrict t tracerel d delta tracerelx x1 dadd ddelete dmodifydef trace t tracerel es set sysel set gsnelimage prodsnd p p t p1 esdef createannotation g gsn recheck set gsnel revise set gsnelset gsnel annotationlet ch image e e annotationrecheck recheckrv image e e annotationrevise reviseru image e e annotationreuse g recheck revisech rv rudef gsnia s sys s0 sys gsn r tracerel d deltaset gsnel annotationlet r0restrict r dc1dmslicesys s delete d modify dc1amslicesys s0 add d modify dc2recheck trace r c1dm trace r0 c1amc2revisetrace r delete dc3recheck1 slicegsnv c2revisec3recheck2 slicegsnr c2recheck c3recheck1createannotation c3recheck2 c2reviselisting 4 helper functions formalized gsn ia algorithmdelta es inputs returns restricted subset t covering elementses lines 12 trace takes traceability relation t set elements es inputs returns set gsn elements mapped es tlines 45 createannotation assigns annotation value elementgsn model given sets elements rechecked revised lines 712change impact assessment algorithm gsn ia takes modelss s0 delta d takes gsn model traceability relation r model elements gsn model elementsreturns set ordered pairs gsn model elements annotations algorithm starts restricting traceability relation based d slices originalmodel s elements deleted modified slicing criterionslices modified model s0 added modified elementsslicing criterion lines 1618 slices correspondinggsn model elements traced traceability relation line 19gsn elements traced elements deleted original modelrevised line 20 slice gsn model based traced elementsrechecked lines 2122 revise recheck setsannotate gsn model elements line 23lifted algorithmlisting 5 variabilityaware version algorithm listing 4algorithms compositions functionoperator calls functionsoperators replaced lifted counterpart assume liftedcertified analysis software product line safety casesdef sys0 type set0 syseldef gsn0 type set0 gsneldef tracerel0 type set0 sysel gsnelstructure delta0 add set0 sysel delete set0 sysel modify set0 syseldef gsnia0 s s0 sys0 gsn0 r tracerel0 d delta0set0 gsnel annotationlet r0restrict0 r dc1dmslicesys0 s ddelete dmodifyc1amslicesys0 s0 dadd dmodifyc2recheck trace0 r c1dm trace0 r0 c1amc2revisetrace0 r ddeletec3recheck1 slicegsnv0 c2revisec3recheck2 slicegsnr0 c2recheck c3recheck1createannotation0 c3recheck2 c2reviselisting 5 lifted change impact assessment algorithmversions slicers provided meet correctnesscriteria fig 2aset types gsn ia need lifted definitions lines 14lifted sets model elements gsn model elements traceabilitymappings lifted delta line 4 composed lifted sets additionsdeletions modificationsproof correctness theorem auxiliary correctness lemmashelper algorithms proofs expands definitions repeatedly applies correctness lifted function composition fig 2blifted helper algorithms lifted cia algorithm operates lifteddata structures helper algorithms need modified correctly operate lifted data structures particular outline lifted versionsrestrict trace listing 6original implementation restrict takes traceability map deltainputs returns minimal subset traceability map coverselements delta presence conditions associatedmodel elements assurance case elements traceability linkslifted version restrict referred restrict0 needscorrectly process presence conditionslifted algorithm starts calculating set relevant elementsmodel union added deleted modified elementsdelta line 2 algorithm returns lifted traceability mapping functiontaking sgpc sg model elementgsn model elementpair pc presence condition function evaluates conjunctionapplying input traceability map t sgpc applying relevantsg recall variabilityaware sets lean sets functionsmapping values given type propositionssimilarly trace0 lifted version trace returned lifted setfunction mapping gsn model element g set configurationsramy shahin sahar kokaly marsha chechikdef restrict0 t tracerel0 d delta0 tracerel0let relevant dadd ddelete dmodifyx t x relevant x1theorem gsnia0 corrects s0 sys0 gsn0 r tracerel0 d delta0 pc pcgsnia0 s s0 r d pc gsnia s pc s0 pc pc r pc d pcdef trace0 t tracerel0 es set0 sysel set0 gsnelggsnel s sysel es s t hs gilisting 6 lifted implementation restrict tracelisting 7 correctness theorem gsn ia0exists model element s input lifted setelements sg belongs input traceability maplifted version createannotation named createannotation0exactly structure original strictly uses set operationsunion set difference image liftedunderlying variabilityaware set implementation listing 1correctness theorem gsn ia0 respect gsn ia listing 7direct instantiation general correctness criteria fig 2a appliedinputs gsn ia algorithm43 examplessection apply lifted cia algorithm examples modifications fragment lms product line presented sec 1 fig 1ex1 featurespecific modification suppose visual class modified class local visual feature analyze fragmentfig 1 inputs gsnia0 shown fig 3a fig 3btracing algorithm step restrict0 calculater visual g19 visual visual g20 visual line 8 c0ac0d assuming backward slicer returning transitive closure elements affect slicing criteria c1dmc1am alarm true visual visual lanedeparturewarningsystem ldws lines 910 tracing c1dm c1am c2recheck g19 visual g20 visual line 11 c0d c2revisec3recheck1 lines 1213 backward gsn slicerc3recheck2 g19 visual g20 visual sn11 visual sn4visual sn18 visual line 14 algorithm returns set gsnelements revised set c3recheck2 rechecked note g20sn4 sn18 base model elements having true presence conditionalgorithm output states need recheck elementsproducts feature visual presentex2 base modification suppose alarm class modifiedbase class present products inputsgsnia0 restricted fragment fig 1 shown fig 3a fig 3ccertified analysis software product line safety casesg5 tt sn3 tt s 8 tt g18 audio g19 visual g20 truesn4 tt sn18 tt sn12 audio sn11 visualr visual g19 visual visual g20 visual audio g18 audioaudio g20 audioassurance case elements traceability links r ex1 ex2s alarm true userinterface true audio audio visual visuallanedeparturewarningsystem ldwss 0 alarm true userinterface true audio audio visual 0 visuallanedeparturewarningsystem ldwsd h visual visualib model s modified model s delta d ex1s alarm true userinterface true audio audio visual visuallanedeparturewarningsystem ldwss 0 alarm 0 true userinterface true audio audio visual visuallanedeparturewarningsystem ldwsd h alarm trueic model s modified model s delta d ex2fig 3 inputs gsnia0 algorithm ex1 ex2alarm class direct traceability links r 0line 8 backward slicer like ex1 c1dm c1amalarm true visual visual audio audio lanedeparturewarningsystem ldws lines 910 c1dm c1am traceability linksc2recheck g18 audio g19 visual g20 visual line 11c0d c2revise c3recheck1lines 1213 backward gsn slicer c3recheck2 g18 audiog19 visual g20 visual audio sn11 visual sn12 audio sn4visual audio sn18 visual audio line 14 algorithm returnsset gsn elements revised set c3recheck2rechecked note example g20 sn4 sn18 annotatedrecheck presence condition visual audio means needrechecked audio visual presentimplementationgsnia algorithm implemented slicers model operators extension mmint 6 model management framework fig 4called mminta 7 order extend mminta support annotative product line models subsequently lifted change impact assessment algorithmfollowing modifications required 1 model elements need extendedpresence conditions true default value way single product models elements default true presence conditiondirectly supported 2 operators models need modifiedpresence conditions consideration compute presence conditionsoutputs modifications systematic linesrestrict0 trace0 listing 6 3 higherlevel algorithms gsniaramy shahin sahar kokaly marsha chechikmodelreleditormideditormmintworkfloweditortype midmodeloperatorsmetamodelstype support runtimeeclipseplatformemfmodeleditorsgmfoclmmintpluginssiriuseclipsefig 4 architecture mmint model management framework 7need modified accordingly use lifted versions operators 4user interface mminta needs support annotating different modelelements presence conditions 5 optionally mminta checkwellformedness presence condition annotations example presencecondition association uml classes subsumedpresence conditions end pointsrelated workmodelbased approaches safety case management methodsmodeling safety cases proposed including goal models requirements models 103 gsn 13 arguably widelymodelbased approach improving structure safety arguments buildinggsn habli et al 11 examine modeldriven development providebasis systematic generation functional safety requirements demonstrates automotive safety case developed gallina 8 proposesmodeldriven safety certification method derive arguments goal structuresgiven gsn process models process illustrated generating arguments context iso 26262 consider category work complimentary focus safety case construction instead assumepresence safety case focus assessing impact changeslifting software product lines different kinds software analysesreimplemented support product lines 24 example typechefproject implements variability aware parsers type checkers javac 12 superc project 9 c language variabilityaware parsergraph transformation engine lifted product lines graphs 20 datalogbased analyses pointer analysis lifted modifying datalogengine 23 spllift 2 lifts data flow analyses annotative productlines model checkers based featured transition systems 5 check temporalproperties transition systems transitions labeled presenceconditions syntactic transformation techniques suggested liftingabstract interpretation analyses 17 functional analyses 22 splspaper methodology tailors lifting approach related worksafety cases product lines demonstrate change impact assessment tackle new class product line artifacts particularly safety casescertified analysis software product line safety casesbest knowledge attempt lift safety case analysisproduct linesformalized systems interactive theorem proving correctnessbehavioral properties software systems formalized verified interactive theorem provers compcert compiler 16 example clanguage compiler fully certified coq theorem proversel4 microkernel 14 verified isabellehol theorem proverisabelle formalize structured assurance case metamodelsacm notation certified definition assurance cases 19conclusion future workpaper presented methodology lifting safety case analysis algorithms software product lines outlined certification infrastructuredata structures correctness criteria lifting approach leaninteractive theorem prover demonstrated approach correctness certification formalizing lifting change impact assessment ciaalgorithm 15 discussed implementation lifted cia algorithmsafety model management mminta 7 lifted ciaalgorithm allows reusing impact assessment conclusions potentiallyexponential number features different product variants opposedproductlevel cia algorithm individual product instancesintractable casesfuture work working industrial partner applying lifted algorithm assurance case models plan liftsafety case algorithms including slicers add implementationsmminta visualization analysis results improved user interactionarea future improvementsreferences1 bertot y castran p interactive theorem proving program developmentcoqart calculus inductive constructions springer publishing companyincorporated 1st edn 20102 bodden e toldo t ribeiro m brabrand c borba p mezini mspllift statically analyzing software product lines minutes insteadyears proc pldi13 pp 355364 acm 20133 brunel j cazin j formal verification safety argumentation application complex uav proc safecomp12 wkshp 20124 chechik m kokaly s rahimi m salay r viger t uncertainty modelingsafety assurance unified framework5 classen cordy m schobbens py heymans p legay raskin jffeatured transition systems foundations verifying variabilityintensive systems application ltl model checking ieee trans softw eng398 10691089 aug 20136 di sandro salay r famelis m kokaly s chechik m mmint graphical tool interactive model management proc models demo 2015ramy shahin sahar kokaly marsha chechik7 fung nls kokaly s di sandro salay r chechik m mmintatool automated change impact assessment assurance cases procsafecomp18 wkshp pp 6070 20188 gallina b modeldriven safety certification method process complianceproc issre14 workshops pp 204209 ieee 20149 gazzillo p grimm r superc parsing c taming preprocessorproc pldi12 pp 323334 acm 201210 ghanavati s amyot d peyton l systematic review goaloriented requirements management frameworks business process compliance procrelaw11 pp 2534 ieee 201111 habli ibarra rivett rs kelly t modelbased assurance justifyingautomotive functional safety tech rep sae 201012 kstner c apel s thm t saake g type checking annotationbasedproduct lines acm trans softw eng methodol 213 1411439 jul 201213 kelly t weaver r goal structuring notation safety argument notation proc dsn04 200414 klein g elphinstone k heiser g andronick j cock d derrin p elkaduwe d engelhardt k kolanski r norrish m et al sel4 formal verification os kernel proceedings acm sigops 22nd symposiumoperating systems principles pp 207220 200915 kokaly s salay r chechik m lawford m maibaum t safety case impact assessment automotive software systems improved modelbased approach proc safecomp17 pp 6985 springer 201716 leroy x formally verified compiler backend journal automated reasoning 434 363446 2009 httpxavierleroyorgpublicompcertbackendpdf17 midtgaard j dimovski brabrand c wsowski systematic derivationcorrect variabilityaware program analyses sci comput program 105c145170 jul 201518 moura l kong s avigad j van doorn f von raumer j leantheorem prover description felty ap middeldorp eds automated deduction cade25 springer international publishing 201519 nemouchi y foster s gleirscher m kelly t isabellesacm computerassisted assurance cases integrated formal methods ahrendt wtapia tarifa sl eds proc ifm19 pp 379398 201920 salay r famelis m rubin j di sandro chechik m lifting model transformations product lines proc icse14 acm ny usa 201421 salay r kokaly s chechik m maibaum t heterogeneous megamodel slicingmodel evolution proc memodels16 pp 5059 201622 shahin r chechik m automatic efficient variabilityaware lifting functional programs proc acm program lang 4oopsla nov 202023 shahin r chechik m salay r lifting datalogbased analyses softwareproduct lines proc esecfse19 acm new york ny usa 201924 thm t apel s kstner c schaefer saake g classificationsurvey analysis strategies software product lines acm comput surv471 61645 jun 2014