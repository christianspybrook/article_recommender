arxiv210500024v1 cslo 30 apr 2021types internal groupoidsextended versioneric finsterantoine alliouxmatthieu sozeaucambridge universitydepartment scienceericfinstergmailcominria irif universit parisfranceantoinealliouxiriffrinria ls2n universit nantesfrancematthieusozeauinriafrabstractby extending type theory universe definitionally associative unital polynomial monadsarrive definition opetopic type able encodenumber fully coherent algebraic structures particularapproach leads definition groupoid internaltype theory prove type groupoidsequivalent universe types type admitsstructure groupoid internally structureuniquentroductionhomotopy type theory brought new perspectiveintensional martinlf type theory higher identity typestype endow structure groupoidideas homotopy theory provide means predictunderstand resulting tower identificationsperspective enormously clarifying respectunderstanding notion proofrelevant equalityleading new class models newcomputational principles number difficulties remainorder complete vision type theory foundationnew structural mathematics based homotopytheoretichigher categorical principlesforemost difficulties followingbehaved theory algebraic structuresarbitrary types fundamental difficulty settingtheory proof relevant setting nearlyfamiliar algebraic structures monoids groups ringscategories infinitarypresentation axioms theoriesform finite list mere properties underlyingtypes sets constitute additional structurelonger assumed consequently order arrivewellbehaved theory axioms subjectadditional axioms frequently referred genericallycoherence conditions short proof relevant settinglonger suffices equations algebraicstructure level equalityspecify structure behaves entire toweridentity types infinite dataorganize manipulate datasimilar problems arisen mathematics homotopy theory higher category theory solutionstechniques known bafflingly attemptsimport ideas plain homotopy type theoryfar failed appears result kind circularityknown classical techniques point relysetlevel algebraic structures presheaves operadssimilar means presenting encodinghigher structures internally type theoryrecourse techniqueshypotheses expect basic objectstheory types presented setlevelstructures leaves strange position absent theoryalgebraic structures use encodealgebraic structuressuggest possible explanation phenomenonfollowing contrary experience setlevelmathematics algebraic structure structuredset defined terms sets underlyingsets functions sets relations passworld homotopy theoretic mathematics notiontype structured type simply longer independentway consequently primitivenotion structured type defined timenotion type present work attemptrendering admittedly somewhat vague idea precisebegin imagining type theory additiondefining universe u types defines timeuniverse s structures course needsomewhat precise exactly mean structure category theory suggests way representingstructure monad u definesthink s universe monads practiceuseful restrict particularly behaved classmonads having reasonable closure propertiesgood understanding higher dimensionalcounterparts submit reasonable candidatewellbehaved collection class polynomial monads 1feel appropriate class structuresnumber reasons reason classmonads arises naturally type theorylarge literature exists interpretation inductivecoinductive types initial algebras terminal coalgebras polynomial monads consider workdeepening extending connection furthermoreclass algebraic structures enjoys pleasant propertiesparticularly amenable weakeningexample general approach weakening algebraicstructures developed baez dolan 2 smoothlyadapted polynomial case cited work employslanguage symmetric operads connectionstheory polynomial functors described 3recent work 4 shown type theoryexpect symmetric operads fact subsumedtheory polynomial monadscentral intuition baez dolans approachpolynomial monad m determines higherdimensional collection shapes m opetopes generateddirectly syntactic structure termsintroduce notion m opetopic typeroughly collection formed decorationsshapes notion weak m algebra definedm opetopic type satisfying certain closure propertiessense approach differs approaches basedsimplices cubes spheres geometry fixedahead time adapted particular structureconsiderationconsiderations mind plan presentwork idea type theory primitivestructures test look likeable prove order answer questionsbuild prototype theory 1 proof assistantagda exploit recent addition rewrite rules 5permits extend definitional equality new welltypedreductions use rewrites necessary ensureprimitive structures subject infiniteregress coherence conditions far obstructednaive attempts defining objectsconcretely introduce universe m2 elements think codes polynomial monadsstructures decode thinkobjects universe m primitives theorylevel types allow freedomprescribe computational behavior particularequip definitional associativity unit lawsrewrite mechanism alluded emphasizestructures taken defined parallel typeskind definitional behaviorsurprising definitional associativity functioncompositionexistence universe mstrong consequences particular allows implementbaez dolan definition opetopic type alludedsubsequently define number weak higher dimensional structures structures abledefine technique monoids groups1categories presheaves particular1 agda source available httpsgithubcomericfinsteropetopictypes2 mean notation distinguish universe m particularimplementation generic idea universe structures sproperties expect refined investigationsetup leads definition simplicial type specialcase groupoidsarises problem justifying correctnessdefinitions orderexample groupoidshomotopical interpretation type theory asserts typesgroupoids natural compareobjects main result followingtheorem equivalenceu grpwords type admits structure groupoid sense structure uniquetheorem regarded constructive internalization intuition provided metatheoretic results effect 6 7related worksocalled coherence problem main motivation present work considered numberauthors briefly compare approach prominentstrains thought1 synthetic structures way avoidproblems posed definition higher dimensional structures simply enlarge collection basic objectsinclude approaches described syntheticreduce higher structures primitiveobjects exactly way homotopy type theorydefine groupoids terms setspoint view adopted example researchdirected type theories aimed specificstructures like higher categories 8 allowgeneral directed spaces 9theory add new primitivestructures type theory collect structuresuniverse decode collections ordinary typesmaps useadditional strict structures analytic internal definitionshigher structures2 twolevel type theory closest related workcurrent approach twolevel type theory10 advocated add second level typetheory settruncated equality typeuse metatheoretic statements inner levelobjects typically taken homotopicallymeaningful ones twolevel approach providesgreat deal generality flexibility cost restrictingapplicability homotopical interpretation typesinner theory likely example theorydeveloped inside twolevelrewrites employ proven theorems outerlevel constrast approach feel somewhateconomical extending theory specific set rewriterules pointing possibility useful theoryhigher structures need restrict homotopicalprinciples like univalenceb preliminariesbasis metatheory type theory implementedagda 11 extension predicativemartinlf type theory 12 particular typesagda implements shall use inductive types recordscoinductive recordsadopt style similar agda code writingx b x dependentproduct ocqcasionally employ xa b x notation improvesreadability use implicit counterpartdependent products written x b x allowshide arguments inferred contextclarify notation nondependent functionsdenoted b usual functions enjoy usualconversion ruleshall extensive use coinductive record typescopatterns producing elements typeswrite precord constructor ttwrite xa b x dependent sum recordconstructor projections fst snd pairsdependent denoted bwrite type absurd patternsappropriate writing elim unique functiontypeidentity type u x y uinductive type constructor refl x x xshall use notion contractible type denotediscontr center contraction referred ctrnotions defined hott book 13 employedincluding equivalence types denoted x y function extensionality denoted funext univalence axiomwrite u universe small types u1universe necessaryorder unclutter clarify presentation occasionally liberties formal definitions example silently inserting applications functional extensionalitynecessary reassociating types order avoidproliferation commas formal development agdaallows informalities remainii u niverse p olynomial m onadsexplained introduction type theoryappears lack ability speak infinitely coherent algebraic structures strategy addressingproblem distinguish collection structuresconsider defined theorycommon technique type theory literatureintroducing universe write m u universethink elements codes polynomial monadstypical type theoretic universe collectionbase types collection type constructorspopulate universe collection base monadsmonad constructors words syntaxstructures parallels syntax typestypically universe types u comes equippeddecoding function el u u case universemonads m element m m decode singletype collection types type families equippedstructure use rewrite rules specifycomputational behavior structurepolynomial structurebegin equip m m underlyingpolynomial indexed container 14 accomplishedpostulating following collection decoding functionsidx m ucns m m idx m upos m m idx m cns m utyp m m idx m c cns mpos m c idx mpolynomials sort appear scienceliterature data datatype declarationequivalently seen way signaturealgebraic theory concretely elements idx mrefer indices serve sorts theoryidx m type cns m collection operationsymbols output sort type pos m cassigns operation collection input positionsassigned index function typfollows monad m induces functoridx m u idx m u called extension givenm xp pos m c x typ m c pccns mthink value functor type familyx idx m u type constructors m inputsdecorated elements x frequently referdependent function formp pos m c x typ m c px decoration c elements xb monadic structuremonad m m going equipunderlying polynomial m algebraic structurespecifically structure required underlying polynomial associated extension m monadcase hand takes form pair functionsm m idx m cns mm m idx m c cns mp pos m c cns m typ m c pcns mequip m multiplication unit operationremark second argument multiplicationdecoration c family cns m constructorsthink input function twolevel treecrucial follows monadsconsider cartesian sense 1 type theoreticallymeans require monad m come equippedequivalencespos m mpos m m c ppos m c pos m ppos m m c pos m ccase example postulate introductionelimination rules formpos m m idx m pos m mposelim m m idx mx p pos m m uu x pos mp pos m c cns m typ m c pp pos m m cpos m posfst m ptyping ruletyp m m c ptyptyp m posfst m ppossnd m pcomputation rulesposfst m pos m p qp posfstpossnd m pos m p qq possndpos m posfst m p possnd m pposhandling positions place stateunitality associativity axioms monadsuniverse form reductionsm mpos mm m ctyping ruletypcomputation rulenotice exactly rules inductively definedindexed unit type3 particular decorations constructorm type family x pos m m u completelydetermined single element x x fact recordfollowing definition reduce clutterdec m x x poselim m xi xmultiplication rules simply mimicpairing projections dependent sumpostulate introduction rulepos m m idx m c cns mp pos m c cns m typ m c pp pos m c q pos m ppos m m c3possnd m m idx m c cns mm c p m typ m c pp pos m m x pposelim m x u pos mposfst m m idx m c cns mp pos m c cns m typ m c pmodifying definitional equalitytype theory tempting require equivalencesdefinitionally asserting type positions reducesapplied constructors appropriate form work comepopulate universe concrete monads monadconstructors equivalences factdefinitional remain provable alternativeequip monad introduction eliminationcomputation rules positions effectguarantee required equivalencemonad definition required implementrules manner consistent required typinglawstyp m m pelimination rulesprinciple like rule unitprefer negative version unfortunatelypossible current implementation rewriting agdam c p m p q pos m p qadditionally posit laws assert constructors eliminators positions compatibleequations omit brevity interestedreader consult development detailsundertake extensive investigationmetatheoretic properties articlewish pause briefly observationsjustify wellformedness example criticalpairs rewrite equations monad lawsequation need ensure confluenceterminationlemma 1 strong confluence rewrite rulesstrongly confluent 15 globally confluentproof rewrite strongly confluent rulestyp typ associated reduction rulespos case r l omit mfixedp typ pp typ pp typ p postyp postypresolution r pairappendix extended version article 16 lemmaextension induces identity monad uequivalence polynomial id decodes followsproposition 1 termination rewritingrules form terminating rewriteproof pos pos typ rewrite rules obviously terminating typ r lneed use dependencypairs path ordering introduced17 verify termination particular associativitylexicographic lifting subterm relationverify s termination going bindersapplying functions subtermsvariant ordinal type eliminator proven terminate17 example 14 p11 requires ensureconstructor types monads inductively generatedmonads considered article satisfyinstances operations specific monadsdefined structural recursion inductivedatatypes shown respect associativityunitality laws prositionally results5 lemma 68 guarantee consistencyfurthermore conjecture rewritestrongly normalizing conjunction definitionalequality agdac populating universeprevious section described generic structureassociated monad m m proceedimplement structure concrete cases describingcase salient features omitting unnecessary detailsfeel improve presentation completedefinitions agda formalizationmaterial follows allow freedom use standard techniques inductive definitionspattern matching definition monadpractice agrees implementationdefine necessary structure ordinary agdadefinitions subsequently install rewrites connectdecoding functions desired implementationsexample order define indices identity monadordinary agda definitionididx uididxpostulate rewriteidx ididx idcns id ttpos id tttyp id tt ttttgiven triviality associated polynomialsurprising unit multiplication equally trivialgivenid ttid ttomit remaining structure similar flavor2 pullback monad monad constructor startsmonad m m family x idx m u refinesindices m additionally decorating inputsoutput constructor elements x referresulting monad pullback m x cf 2 section24 implement construction postulatingfunctionpb m m x idx m u madds necessary code universe definepolynomial pb m x followsidx pb m xiidx m xcns pb m x xccns mppos m cx typ m c ppos pb m x cpos m ctyp pb m x c ptyp m c p punit pullback monad simply calls unitunderlying monad decorates input valueoutputpb m x x m dec m x xmultiplication pullback monadsimply calls multiplication underlying monadtime decorating result decorations secondlevel constructors forgetting intermediate decorationpb m x c m c 0 00 p fst p0 p snd posfst p possnd pididxpresentation follows omit auxiliary stepwrite defining structure associatedmonad1 identity monad begin adding constant idm universe represent identity monad namedremaining structure easily workeddefinitions omit details3 slice monad baezdolan slice constructionheart opetopic approach constructionallows raise dimension coherencesalgebraic structures setting formmonad constructor slice m m basic intuitionmonad m m monad slice m describedmonad relations m order realize intuitionway encode relations mkind data identity type encodes relationsordinary type data data serveconstructors slice monadbegin monad m m let defineidx slice m iidx m cns mindices monad slice m exactlyconstructors monad m going capturenotion relation m help certain inductivefamily defined followsdata tree idx slice m uposition ptyp slice m lftyp slice m nd c inl ttctyp slice m nd c inl p qtyp slice m p qremains unit multiplication slicemonad accordance general laws monadsunit constructor needs unique positionpositions given tree given occurrencesconstructors implies unit given constructor ccorolla tree node consistingc setslice m cnd c p m typ m c plf idx m tree mp lf typ m c pnd idx m c cns mp pos m c cns m typ m c pp pos m c tree typ m c p ptree m cdefine cns slice m treereader familiar theory inductive typesrecognize modified form indexed w typeassociated polynomial indexed containercase elements type trees generatedconstructors polynomial question underlyingpolynomial m case hand differencepresent setup polynomial equippedmultiplication unit reflect fact indexingtrees indices typically caseconstructors applying multiplicationunit appropriate result viewelement cns slice m c tree generatedconstructors m image iterated multiplicationc sense definition captures relationsoriginal monad mturn rest structure required completedefinition slice m intuitively speaking positionstree internal nodes accomplisheddefining positions recursion constructorsfollowspos slice m lfpos slice m nd cnote definition type correctassumption m definitionally right unital similarremark applies rest definitions slice monadsection exactly problem completingdefinition slice monad assumptionstruncation motives introduction monadicuniverse placelet sketch definition multiplicationslice monad hypotheses given treecns slice m c idx m c cns mdecorationp pos slice m cns slice m typ slice m pview preceding discussion means assignsposition tree multiplies constructorinhabits position multiplication slice mintuitively described substitutingtrees node decoratesdefinition slice m require auxillary function following typem m idx m c cns mcns slice m cp pos m c cns m typ m c pp pos m c cns slice m typ m c p pcns slice m m cpos slice m pppos m cwords tree leaf positionsnode positions consist unit typerecord current node choice positionbase constructor recursively node tree attachedpositionfinally typing function typ slice m p projectsconstructor m occurring node specifiedintuition function grafts tree specifiedappropriate leaf treeseen incarnation multiplication free monadgenerated underlying polynomial m functionsimply operates induction defined followsm lfpos mm nd cnd c 0 0define0 p q pos m c p q0 p q pos m c p qp m p p0 p m p 0 pfunction hand complete definitionmultiplication slice monadslice m lflfslice m nd cm wdefinitions fiberwise dependent caseresembles closely nondependent attempted systematically dependent versionsmonadic structure introduced appendingpreviously given example idx dependentversion family idx indicesstep dependent monad equippedpolynomial lying base polynomial correspondsfollowing dependent familiesidx m m m m idx m uw inl tt0 p q inr p qp slice m p 0 pdefinition says substitution trivial leaveslooking node retrieve treeliving position called w graftresult recursively substituting remaining branchesrefer reader formalization detailsremaining constructions handling positions slice monadd dependent monadsnotion dependent type primitiveaspects martinlf type theory surprisingquickly need dependent versionpolynomial monads note potential pointconfusion dependent type thoughtfamily types dependent base type dependent monadsense family monads monadstructure dependent families indices constructorsindexed indices constructors base monadm way equivalence dependenttypes domain functions codomain dependent monads base monad m correspond monadsm 0 equipped cartesian homomorphism m 4advantage working dependent styleneed axiomatize notion homomorphismpropositional equalities encoded directlytyping multiplication operatorbegin let postulate monad m m universem m u monads mm m um m inhabitants mm codesmonads equipped cartesian morphism mreason given monad m dependent monadm m m speak pair m m monadextensiondecoding functions dependent monads followsetup nondependent case simply repeating4 fact entirely possible add monadic form dependent sumlist monad constructors universe m statementliterally true need constructionpresent article omit detailscns m m m m m idx midx m cns m utyp m m m m midx m idx mc cns m c cns m cpos m c idx m typ m c preader notice analogdependent positions modellingcartesian morphisms monads positionsdependent constructor c cns m cunderlying constructor c workingfiberwise reflect requirement directly typesignaturemonadic structure dependent monad simply operates fiberwise following multiplication base monadm m m m midx m idx mcns m mm m m m midx m c cns mp pos m c cns m typ m c pidx m c cns m cp pos m ccns m typ m c p pcns m m cfact require multiplication family dependent constructors live multiplication baseconstructors similarly unit guaranteeshomomorphism property alludeddependent monads equipped equational laws making compatible correspondinglaws monads live example typingfunctions respect indices parametersbase casetyp m m ptyp m m c ptyp m posfst m ppossnd m psimilar laws asserting definitional associativityunitality multiplication followexactly pattern omit details refercurious reader implementationremark positionsdecorations dependent constructor essentiallyconstant caseanalogous function dec generating decorationssingle piece data similar definition functionoccurs occasionally codee populating dependent universequickly dependent counterparts basemonads monad constructors previous sectiondefinitions routine easily deducedabsolute case presentation brief1 identity monad dependent identity monadparametrized type u indexed identitymonad id dependent monad constructorformid u m ididx id ttcns id x ttpos id tt tttyp id x tt ttbase case multiplication unit valuesunit type making structure essentially trivial2 dependent pullback monad refineindices base monad dependent pullback monadallows refine indices dependent monadconstructor takes formpb m m m m m x idx m ux idx m idx m x um pb m xnote family x depend elementsrefining family x base monad underlyingpolynomial dependent pullback definedfollowsidx pb m x xx xiidx mcns pb m x x cslice m m m m m m slice mabsolute case indices given dependentconstructors setidx slice m ccns m ciidx msimilarly type constructors cns slice m treeslying tree base corresponds followingverbose inductive typedata tree idx slice m idx slice mtree ulf idx m idx mcns slice m m lfnd idx m c cns mp pos m c cns m typ m c pp pos m ccns slice m typ m c p ppolynomial defined3 dependent slice monad finally dependent slicemonad extends baezdolan slice construction dependent case monad constructor typed followsx typ m c p pccns m c ppos m ctyp pb m x c p typ m c p pmultiplicative structure following fiberwise rulesbase pullback pb m xidx m c cns m cp pos m c cns m typ m c pp pos m ccns slice m typ m c p pcns slice m m c nd crest description dependent slice followsexactly pattern duplicating definitions lawsbase case routinely fiberiii o petopic t ypessection use universes introducedorder implement baez dolans definitionopetopic type 2 explain usedefinition capture notion weak m algebra finishexamplesdefinition 1 opetopic type monad m definedconinductively followrecord opetopictype m m u1c idx m ur opetopictype slice pb m cdefinition opetopic type consistsinfinite sequence dependent familiesc x c r x c r r xdomain set indices monad definitionincorporates previous families sequence givenopetopic type x opetopictype m denotesequence dependent types succinctlyx0 x1 x2 destructor notation quicklyheavy use similar convention seriesmonads m m0 m1 m2 generated definitionm0 mx0 c x idx m urecall m polynomial monad m algebraconsists carrier family c idx m umapidx m m c cm1 slice pb m0 x0 x1 c r x idx m1 um2 slice pb m1 x1 x2 c r r xidx m2 udescribing connection opetopic typesweak m algebras let examplesthink resulting dependent families fillerscollection shapes generated monad mconcreteness fix m id examples givenx opetopictype id define type objects xsimplyobj uobj c x ttsingle slice x provides type arrowsobjects defined followsarrow x y obj uarrow x y c r xtt y tt dec id c x xfurthermore loop f x arrowdomain codomain x includes family elementsthought nullhomotopies fdefinednull x obj f arrow x x unull x f c r r xtt x tt dec id c x x flf tt x elimexamples shapes filling familiesdevelopmentweak algebras fibrant opetopic typeswish opetopic type xopetopictype m encodes structure weak m algebrabegin convenient adopt followingconvention recall x consists infinite sequencedependent types following form equation 1discussion follows instead working fixedopetopic type x work abstracttype families x0 x1 monads m m0 m1following pattern dependenciesfreely add new families form xi hypothesesnecessary advantage working waydefinitions parameterized portionopetopic type necessary opposed dependingentire opetopic type x consequentlyable reuse definitions constructions startingpoint infinite sequence generated xsatisfies equations expressing compatibilitymultiplication m needcomplete description equations dimensionsmotivates present work clearlydependent type x0 idx m u serve carrierm algebra structure let sequencefamilies providesiteration obtain type family x1 idx m1u unfolding definition indices slicepullback monads domain x1 takesformp pos m c x0 typ m c piidx m xx0 ccns melements type 4tuples x cobserve elements c typedexactly arguments hypothetical algebra mapintroduced regard family x1relation triples c elements x x0order define map need imposerelation functional sense unique xdetermined triple casefamily x1 multiplicative defineismult x0 idx m0 u x1 idx m1 u uismult x0 x1 idx m c cns mp pos m c x0 typ m c piscontrx1 x cxx0supposing given proof m1 ismult x1define algebra mapc fst ctr m1 cfurthermore writewit c snd ctr m1 cassociated element relation x1 c cwitnesses multiplicationlet suppose sequence extends stepgiven type family x2 idx m1u proof m2 ismult x2 usestructure derive expected lawsalgebra map defined exampleexpect satisfy unit law decorating unit constructorelement x applying returnelement x words expect able provecoh idx m x x0m dec m x0 x xprove equality let define following functionalgm2 idx m x x0x1 x m dec m x0 xalgm2 fst ctr m2 lf x elimsimply notice pairsequal indicated inhabit contractiblespace projecting factor gives exactly desiredequationexpect algebra map satisfy equation expressing compatibility multiplication followingformcoh i0 idx m c0 cns m0 p pos m c cns m typ m c p0 p pos m c0 q pos m 0 px0 typ m 0 p qm c0 0 p 0 posfst p possnd pc0 p 0 p 0 pnote equation simply type theoretic translation familiar commutative diagramm x0mm x0c c0x1 wit cp 0 p 0 pp 0 p 0 px0 cx p wit 0 p 0 ppairsctr m1 m dec m x0 x x alg xm m x0instantiating function algm2 argumentsprove axiom use m2 define followingmultiplication operation elements family x1algm2 idx m c cns mp pos m c x0 typ m c pp pos m ccns pb m x0 typ pb m x0 c px0 x0 x1 x1 x0 cx p pos m c x1 typ pb m x0 c px1 x0 pb m x0 calgm2 fst ctr m2ctr m1 m c0 0 p 0 posfst p possnd pc algm2 c x0 x1 xinhabit contractible space components equal giving desired equationthink functions algm2 algm2 definednullary binary cases multiplicativeoperation relations algebra structure keyinsight seen multiplicative structureencodes exactly laws algebra map definedlevel lower similarly able extend sequencestep family x3 multiplicativeable operations algm2algm2 satisfy unit associativity lawsturn encodes 2associativity 2unitalityalgebra map motivates following definitiondefinition 2 opetopic type x monad m saidfibrant given element followingcoinductively defined propertyrecord isfibrant m m x opetopictype m ucarismult ismult m c r xrelisfibrant isfibrant r xfibrant opetopic types definitioninfinitely coherent m algebras multiplicativityrelations sequence witnessing higherdimensional laws satisfied structure earliersequenceb higher structuresuse preceding notions define numbercoherent algebraic structures example obtaininternal definition notion groupoid followsnd c p m1 typ m c p p pdefinition 3 groupoid fibrant opetopic typeidentity monadgrp xopetopictype id isfibrant xtwolevel tree consisting base node csecond level constructors specified decorationdecoration nodes elementsx1 definedattempt justify correctness definitionsections followhappens monad slice id fact monadalgebras monoids consequently setup leadsnaturally definition type typecoherently associative binary operationinl tt x1inr p inl tt x pdefinition 4 type fibrant opetopic typeslice identity monadtype xopetopictype slice id isfibrant xfurthermore notion group definedimposing invertibility axiom classical theorem homotopy theory asserts type groups equivalenttype pointed connected spaces loopspaceconstruction interesting techniquesarticle lead proof fact type theorynotion category definedsetup recall opetopic type identity monad idtype objects type arrows equations 23 definition groupoid invertibilityarrows underlying opetopic type consequencefact family arrows assumedmultiplicative consequently obtain reasonable notionprecategory simply dropping assumptionrequiring fibrancy application destructorprecat xopetopictype id isfibrant r xprefix pre refers fact definitionmissing completeness axiom asserting invertiblearrows coincide paths space objectsaxiom univalence sense 18 axiomeasily worked present setting distractslightly main objective present workpursue matteriv t groupoid associated typesection use machinery setproduce groupoid associated type eventuallyprove unique step need sourceopetopic types notion dependent monadimportant dependent monadgives rise opetopic type reason phenomenonsimple dependent monad constructors mirrormonad constructors absolute case monad extensionm m fact gives rise new monad extensionfollowsslice pb m idx mslice pb m j k j knotice pulling idx m identitytype gives canonical family applypb constructor iterating constructionassociated monad extension m m infinitesequencem m m0 m 0 m1 m 1 m2 m 2mi1 m i1 obtained mi mtransformationconstruction provides desired sourceopetopic types formally define copattern notationoptype m m opetopictype mc optype m m idx mr optype m moptype slice pb idx mslice pb m j k j kspecializing case identity monad obtainfollowingdefinition 5 type u underlying opetopictype defined opetopic type associateddependent identity monad determinedopetopic typeoptype id idnotation previous paragraphorder type determines groupoid sense taskopetopic type fact fibrantalgebraic extensionslet m m m m extensionm m algebraic proofisalgebraic m m m m uisalgebraic idx m c cns mp pos m c idx m typ m c ptyp m ciscontriidx m ccns malgebraic extension thought roughlyanalogous generalized kind opfibration thinkconstructors generalized arrows inputindices output hypothesis says know familylifts source constructor conclusionexists unique pushforward consisting liftoutput constructor connectingtyping function agrees provided input liftshypothesis way encoding m algebramotivates property 19 sectionmain use notion algebraic extensionfollowing lemma proof entirely straightforwardlemma 2 suppose pair m m algebraic extension relation idx m 1 multiplicativeconsequently dependent monads sourceopetopic types algebraic extensions thoughtsource multiplicative relations wantprove fibrancy opetopic type associated monadextension need know extensionsgenerated sequence algebraic main theoremsingle iteration slice construction monadextension algebraictheorem 1 let m m monad extension sliceextension m1 m 1 algebraicproof extended version article16 importance theorem followingimmediate corollariescorollary 1 let m m algebraic extensionopetopic type optype m m fibrantproof base case coinduction lemma 2coinductive case covered theorem 1corollary 2 map u grpproof let u type short calculation showsmonad extension id id algebraic resultfollows corollary 1b uniqueness groupoid structureturn task showing map ugrp equivalence observe forgetfulmap grp u given extracting typeobjects equation 2 opetopic type underlyinggroupoid g grp readily checked compositedefinitionally identity remainsshown g grp equivalent appliedtype objectsunwinding definitions facedfollowing problem suppose given monadextension m m opetopic type xopetopictype m hypotheses provex o optype m m o denotes appropriatenotion equivalence opetopic types remarkopetopic type optype m m completely determinedalgebraic structure dependent monad mminimum assume dataopetopic type x equivalent data provided moverlapmeans concretely let begin basesequence writing z optype m m reduce clutterfamily z0 idx m u definition givenfamily dependent indices idx m dependentmonad m hand additional hypothesesopetopic type x provides abstract typefamily x0 idx m u clearly need assumeequivalence e0 idx m idx m x0 orderchance end desired equivalenceopetopic typesmoving stage z1 givendependent indicesidx m 1 idx m1 uiteration dependent slicepullback construction unfolding definition formidx m 1 j c vjidx mrjj 0typ m dr equality relating typing function ddependent indices essentially dependentconstructors m slightly reindexed wordsdependent equivalencee1 idx m1 idx m 1 e0 x1previous equivalence e0 amounts saying relations family x1 dependent constructorsm reindexed according typing inputoutput positions dataprovided dependent monad m additionallyneed add equivalence list hypothesesrecap assuming equivalences e0 e1 amountsrequiring stages opetopic type xequivalent indices constructors dependentmonad m respectively structure remainsdependent constructors m equipped unitmultiplication operators recallsection iiia family relations x1 extendssequence family x2 proofm2 ismult x2 family x1 equippedmultiplicative structure given functions algm2algm2 defined case current situationassume opetopic type x fibrant factneed assume r x fibrant statementhold piece information orderx completely agrees dependent monad mequivalence e1 additionally homomorphism sendingalgm2 algm2 theoremdata suffices prove equivalence opetopic typestheorem 2 suppose m m monad extension xopetopictype m opetopic type r x fibrantsuppose given dataequivalence e0 idx m idx m x0equivalence e1 idx m1 idx m 1 e0 x1e0proofs s m e0 e1algm2 tm e0 e1 algm2equivalence opetopic typesx o optype m mtaken liberties presentationtheorem strictly speaking stated preciselysense second equivalence e1 equivalencee0 precisely equality implied symbole0 e1 omissions perfectly rigorousstandard techniques feel statement conveysessential ideas clearly fully elaboratedstatement require great deal preparationmention space appendix extended versionarticle proof 16 theorem 2obtain desired equivalencedcns m c4tuple j c v equation 4 noticedata redundant eliminating equalitytheorem 3 mapu grpequivalenceproof given g grp let u type objectsapply theorem 2 m id m ide0 identity equivalence e1consequence 13 theorem 582 required equalitiesstraightforward calculationv c onclusionpresented approach defining higher coherentstructures homotopy type theory equipping type theoryprimitive set structures collected universe mpolynomial monads demonstrated approachprove nontrivial theorems structuresbrief final section compare related approachessurvey possible directions applicationsfuture directions1 symmetric structures natural class structuresescapes capabilities current approachsymmetric structures incorporate higheranalogs commutativity examples include e groupsmonoids symmetric monoidal categories general operads algebras2 higher category theory seen higherstructure amenable treatment methodscategory obvious point followdeveloped theory categoriesformalized manner3 general theory structures mentionedintroduction present work stepgeneral theory types structuresfeel certain ideas presentwork carry theory complete picturebasic principles remains understoodcareful investigation interaction techniquesunivalent implementations type theory cubical typetheory remains future workaccompanying general theory anticipate deeperinvestigation metatheoretic properties proposedapproach example agda implementation limitedexpressivity rewrite rules complicated explicit universe construction proper extension mlttallow investigation metatheoretic propertieslike decidability type checking strong normalizationtechniques like normalizationbyevaluation potentially settling conjecture iib furthermoretouched potential models topicdeserves feel deserves careful attentionr eferences1 n gambino j kock polynomial functors polynomial monads mathematical proceedings cambridge philosophical society vol 154 1 p 153192 20132 j c baez j dolan higherdimensional algebra iii ncategoriesalgebra opetopes advances mathematics vol 135 2pp 145206 19983 j kock joyal m batanin jf mascari polynomial functorsopetopes advances mathematics vol 224 6 pp 26902737 20104 d gepner r haugseng j kock operads analytic monadsarxiv preprint arxiv171206469 20175 j cockx n tabareau t winterhalter tamingrew type theory computational assumptions proceedingsacm programming languages 2020 online availablehttpshalarchivesouvertesfrhal029010116 b van den berg r garner types weak groupoidsproceedings london mathematical society vol 102 2 pp370394 20117 p l lumsdaine weak categories intensional type theoryinternational conference typed lambda calculi applicationsspringer 2009 pp 1721878 p r north directed homotopy type theory electronicnotes theoretical science vol 347 pp 223239 20199 e riehl m shulman type theory synthetic categoriesarxiv preprint arxiv170507442 201710 d annenkov p capriotti n kraus twolevel type theoryapplications corr vol abs170503307 2017 online availablehttparxivorgabs17050330711 agda development team agda 2611 documentation 2020 onlineavailable httpsagdareadthedocsioenv261112 p martinlf intuitionistic theory types predicativestudies logic foundations mathematics elsevier 1975vol 80 pp 7311813 t univalent foundations program homotopy type theory univalentfoundations mathematics institute advanced study httpshomotopytypetheoryorgbook 201314 t altenkirch n ghani p g hancock c mcbride p morrisindexed containers j funct program vol 25 2015 onlineavailable httpsdoiorg101017s095679681500009x15 g huet confluent reductions abstract properties applicationsterm rewriting systems j acm vol 27 4 p 797821 oct1980 online available httpsdoiorg10114532221732223016 allioux e finster m sozeau types internal groupoidsextended version arxiv preprint 202117 f blanqui g genestier o hermant dependency pairstermination dependent type theory modulo rewriting corr volabs190611649 2019 online available httparxivorgabs19061164918 b ahrens k kapulkin m shulman univalent categoriesrezk completion mathematical structures sciencevol 25 5 pp 10101039 201519 t leinster higher operads higher categories cambridge universitypress 2004 298ppendixlemma 3 strong confluence r pair fixmonad m rules joinedt r t0 t t00 t00 t0proof case overlap application reducesstepc p typ c papplying rule instead resultsterm rule applies given subtermstepc p typ c pc p p q typ c pos p qtypc p p qtyp posfst c pos p qpossnd c pos p qposfstpossndc p p q typ p qc p pinductive case nd c evaluatingdecoration position corresponding basetree inl tt obtain 4tuple j 0 r dj 0 idx m r j 0 j d cns m c j 0typ m d definetheorem 1 let m m monad extension sliceextension m1 m 1 algebraicproof unfolding definitions idx m1iterated sumiidx m jidx m ccns mp pos m c idx m typ m c pgiven j c type idx m 1 j cdependent indices iterated sum formtyp m djidx m rjj 0 dcns m cwords tuple j c seen constructorc inputs output decorated elements idx melement j 0 r d lying simply constructordependent monad m c intrinsic typinginformation indices assigned underlying dependent polynomial m matches decoration cconstructors follow similar pattern assembled trees constructor base monad m1 treeinternal nodes carry additional informationdecoration incoming outgoing edges elementsidx m constructor m 1 lying treebuilt dependent constructors m carryingadditional information equalities witnessing typinginformation node agrees decorationnode lies sense previous paragraphsituation theorem followinggiven 4tuple j c idx m1 treecns m1 j c decoration treeassigns positionsnodes index living idx m 1 seenmeans single dependent constructor proofstyping information matches local decoration nodeprove theorem produce situationpieces dataj 0 r m d 0 0ndd p 0 p 0 p q 00decorations 0 0 typingcompatibilities 0 0 obtained inductionhypothesis coherence asserting typing information constructor unchanged transportedequality indicessummary decoration assigns nodetree dependent constructor lying constructoroccupying node compatibility informationtyping induction accumulatedependent constructors dependent tree lyingtime accumulate witnesses typingnodes resulting tree agrees clearlyconstructionuniqueness need triple0 0 0 equal defined proofproceeds induction given tree crucialpoint data 3tuple eliminatedaway let expand 0 j 0 r dr j 0 j eliminate assume j 0 j similarly0 typ m 1 0 equality typingfunction 0 original decorationfree parameter begin freely eliminate 0point assume actually typing function0 left dependent tree 0remaining elements 0 dproceed induction proceed inductiondependent tree 0 fact completely forcesvalues d indexing dependent treesexample lf j valid possibility0 lfj refl case necessarilyd m j refl dec refl required ndcase similar path algebra considerablyinvolvedspace datacontractibleconstruct data induction treecase lf j necessarily c mdec jtheorem 2 suppose m m monad extension xopetopictype m opetopic type r x fibrantsuppose given dataequivalence e0 idx m idx m x0equivalence e1 idx m1 idx m 1 e0 x1e0proofs s m e0 e1algm2 tm e0 e1 algm2equivalence opetopic typesj refl m j dec reflx o optype m mindex idx m 1 j cdependent tree cns m 1proof typ m 1lf j reflfunext elimproof proof coinduction sufficesproduce elements e00 e01 s0 t0 typescorresponding elements hypothesesmodified transformationsm mm1 m 1observe follows univalenceequivalences e0 e1 eliminated hypothesesopetopic type x abstract wordsfree assume x0 idx m x1 idx m 1remaining abstract family xx2 idx m2 umaking simplifications equalities st following typess idx p m j idx p mj p m j algm2 fst sndt idx p m c cns p mlf j lf j refl produceelement x2 typex2 js lf jj m dec jjs j refl m j dec reflhand elementx2 x2 algm2 lf j lf jx2 snd ctr m2 lf xalgm2 defined multiplicativityrelation x2 term s j j refl obtainedhypothesis s givesjs algm2 lf jobtain desired result transporting x2equalitypos p m c cns p m typ p m c pmoving inductive case node letpauseanticipate intend prove equations s0j idx p m id cns p m j ct consequencesp pos p m c cns p m typ p m d p pproceed equations equivalence e01j p m dprocess constructing specificallyformalgm2 fst fst c snd c snd j dp typ m fst dp snd d p psetp m pb m idx ms0 idx p m1 j idx p m 1e01 p m1 j p m 1 jalgm3 fst sndp m pb m j k j ksimplify notatione00 identity e1identity remains construct equivalence e01typeidx m2 idx m 2 x2check required equations claim factsuffices construct mape idx m2 idx m 2 x2map necessarily equivalencefollows fact idx m 2 x2 multiplicative relations theorem 1assumptionunfolding definitions eliminating redundancies map e depends data treecns m1 j c j c idx m1 decorationnodes tree family idx m 1 dependenttree living proof typing functionagrees data determined situationanalogous encountered proof theorem 1proceed simultaneous inductiont0 idx p m1 c cns p m1pos p m1 c cns p m1 typ p m1 c pj idx p m 1 id cns p m 1 j cp pos p m1 ccns p m 1 typ p m 1 d p pe01 p m1 c j p m 1 dalgm3 fst fst c snd c snd j dp typ m1 fst dp snd d p pmonads advanced single slicep m1 pb m1 idx m1p m 1 pb m 1 j k j kfurthermore left equality includesapplication equivalence e01 right usesunit multiplicative operators algm3 algm3corresponding fact family x3multiplicativemeans want ensureequivalence e01 sends required elements applicationsunit algm3 multiplication algm3 functionsneed use functions definition e01furthermore need use unit casealgm3 dimension corresponds corollatree single node present dimensionneed case split dependingnode tree recursing descendantspossible soon monad m consideringfinitary sense type positions merelyequivalent finite type case propertytree corolla decidablerequired case split problem intendedapplication easily checked identity monadproperty inheritedpulling slicing consequently freely proceedhypothesisreturning definition equivalence e01inductive case nd cnd c goal produce elementtypex2 js nd cj p m cjs j refl p m ccase distinction based treecorolla case prove equalitiesu j p m c j cv j refl p m c inl ttresult follows transporting termalgm3 j c inl ttfibration x2 equalities u vcorolla proper descendantsproceed follows appealing inductionhypothesis obtain family elements x2 parameterized positions p pos m c assemblewitness binary multiplication calgx2 arguments algx3correct type transport equality givenhypothesis tcompletes definition e01 readerachieved goal multiplicativeoperators algm3 algm3 constructionrequired equivalence remains check equations s0t0 long calculation reproducehard path algebra s0definition verifying t0 slightly involvedcase proceed induction trees occurringarguments c c splitting casesleaf corolla tree 2 nodesadditionally course induction usesoperators algm3 algm3 associativeunital assumption opetopic type xfibrant