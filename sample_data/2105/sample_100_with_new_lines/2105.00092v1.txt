arxiv210500092v1 physicsplasmph 30 apr 2021
code osukin 3d upgraded directdrive fuel
target 3d implosion code in heavy ion inertial fusion
h nakamuraa  k uchiboria  s kawataa t karinob  r satoa  a i
ogoyskic
graduate school of engineering utsunomiya university utsunomiya 3218585 japan
collaborative laboratories for advanced decommissioning science japan atomic
energy agency fukushima 9708026 japan
department of physics varna technical university varna 9010 bulgaria
abstract
the code osukin 3d is an upgraded version of the 2d code osuki
comput phys commun 240 83 2019 code osukin 3d is an integrated 3dimensional 3d simulation program system for fuel implosion
ignition and burning of a directdrive nuclearfusion pellet in heavy ion beam
hib inertial confinement fusion hifthe code osukin 3d consists of
the three programs of lagrangian fluid implosion program data conversion
program and euler fluid implosion ignition and burning program the code
osukin 3d can also couple with the hib illumination and energy deposition program of ok3 comput phys commun 181 1332 2010 the
spherical target implosion 3d behavior is computed by the 3d lagrangian
fluid code until the time just before the void closure of the fuel implosion
after that all the data by the lagrangian implosion code are converted to
the data for the 3d eulerian code in the 3d euler code the dt fuel compression at the stagnation ignition and burning are computed the code
osukin 3d simulation system provides a capability to compute and to
study the hif target implosion dynamics
keywords implosion heavy ion beam inertial confinement fusion
directdrive fuel pellet implosion ignition burning
program summary
corresponding author
email address kwtccutsunomiyauacjp skwtaggmailcom
preprint submitted to elsevier
may 4 2021
program title osukin 3d
licensing provisions cc by nc 30
programming language c
computer workstation xeon 2 ghz or higher recommended
ram 120gbytes minimum
operating system unix linux for example centos 64 ubuntu 18041 lts
journal reference of previous version code osuki 2d version
nature of problem nuclear fusion energy would be energy source for society in
this paper we focus on heavy ion beam hib inertial confinement fusion hif a
spherical mmradius deuterium d  tritium t fuel pellet is irradiated by hibs
to be compressed to about a thousand times of the solid density the dt fuel
temperature reaches 510kev for the ignition to release the fusion energy the
typical hibs total input energy is several mj and the hibs pulse length is about
a few tens of ns the osukin 3d code system provides an integrated tool to
simulate the hif dt fuel pellet implosion ignition and burning in 3 dimensions
3d the osukin 3d code system is an upgraded version of the code osuki
comput phys commun 240 83 2019 which is a 2d implosion simulation
system in hif the dt fuel is compressed to the high density and so the dt
fuel spatial deformation may be serious at the dt fuel stagnation therefore
the osuki and osukin 3d systems employ a lagrangian fluid code first to
simulate the dt fuel implosion phase until just before the stagnation then all
the simulation data from the lagrangian code are converted to them for the euler
fluid code in which the dt fuel ignition and burning are simulated
solution method in the two fluid codes lagrangian and euler fluid codes in the
osukin 3d system the threetemperature fluid model j appl phys 60 898
1986 is employed to simulate the pellet dynamics in hif
additional comments including restrictions and unusual features the lagrange
code is weak against the spatial mesh deformation from nature of its numerical
algorithm when shortwavelength perturbations are imposed near the poles of
the spherical target the spatial meshes might crash and the computation run may
stop
1 introduction
code osukin 3d 3 dimension is an upgraded 3d version of our code
osuki 1 and it provides a capability to simulate a deuterium d  tritium
t fuel target implosion ignition and burning in 3d in heavy ion beam hib
inertial confinement fusion icf
in icf dt fuel target implosion ignition and burning are essentially
important to release a sufficient fusion energy output in icf a few mg dt
in a fuel pellet is compressed to about a thousand times the solid density
by an input driver energy for example lasers or heavy ion beams hibs or
pulse power in addition the ion temperature of the compressed dt must
reach 510 kev 2 in order to compress the dt fuel stably to the high
density the implosion nonuniformity should be less than a few percent3
the key issues of the fuel implosion in icf include how to realize the uniform
implosion the osukin 3d code system provides an integrated computer
simulation tool to study the dt fuel implosion ignition and burning in heavy
ion inertial confinement fusion hif 4 5
the dt fuel implosion is simulated until just before the void closure time
by the lagrangian code which can couple with the ok3 code to include the
timedependent hibs energy deposition profile in the target energy absorber
layer for example the detail hibs illumination on a hif dt target can be
computed by a computer code of ok3 6 7 8 the lagrange code data are
converted to the data imported to the euler code the euler code is robust
against the target fuel deformation the dt fuel ignition and burning are
simulated further by the 3d euler fluid code the osukin 3d code system
simulates the 3d hif target implosion dynamics and would contribute to
release the fusion energy stably for society
2 osukin 3d code algorithm description
21 osukin 3d code structure
the osukin 3d code system consists of three parts the lagrangian
fluid code 9 the data conversion code from the lagrangian code to the
euler code and euler code the fluid model is the threetemperature model
in ref 10 the lagrangian fluid code the data conversion code and the
euler code are described below in detail
in the lagrangian fluid code the spatial meshes move together with the
fluid motion 9 however the lagrange meshes can not follow the fluid
large deformation on the other hand the euler meshes are fixed to the
space and the fluid moves through the meshes therefore just before the
void closure time that is the stagnation phase the lagrangian code is used
to simulate the dt fuel implosion after the void closure time the euler
code is employed to simulate the dt fuel further compression ignition and
burning between the lagrangian code and the euler code the data should
be converted by the data conversion code
all the simulation process is performed in its integrated way by using the
script of codeosukinfusionstartsh the processes executed by this
shell script are as follows
1 make the stack size infinite
2 remove all output data file and make the new output files
3 change the permission of shell scripts to executable
4 compile the main function of the lagrangian code and execute it
5 if any problems do not appear during the calculation of the lagrangian
code compile the main function of the data conversion code and execute it
6 if there is no problem during the data conversion compile the main function of the euler code and execute it
22 steps in lagrangian code
the lagrangian code has the following steps
initialize the variables and calculation of total input energy
calculation of time step size
calculation of coordinates
solve equation of motion
solve density by equation of continuity
calculation of artificial viscosity
transfer the data to the ok3
calculation of energy deposition distribution in code ok3 for details
of the ok3 see the refs6 7 8
solve energy equations
calculation of heat conduction
calculation of temperature relaxation among three temperatures
solve equation of state
save the results
end the lagrangian calculation right before the void closure
transfer the data to converting code
23 data conversion code from lagrangian fluid code to euler fluid code
1 read variables saved in lagrangian code
2 generate the eulerian mesh
3 calculate the interpolation of the physical quantity to them on the
eulerian mesh
4 write the converted data to the eulerian code
24 steps in eulerian code
1 read the mesh number from the converted data and define the each
matrices
2 initialize the variables
3 calculation of time step size
4 solve equation of motion
5 track the material boundaries of dt al and pb
6 linearly interpolate the boundary lines and transcribe them on the
eulerian code
7 discriminate the materials by using the transferred boundary line
8 solve density by equation of continuity
9 calculate artificial viscosity
10 solve energy equations
11 calculation of fusion reaction
12 calculation of heat conduction
13 calculation of temperature relaxation among three temperatures
14 solve equation of state
15 save the results
16 end
3 files included
the logical coordinates in the lagrangian code are identified by the mesh
number of i j k one lagrange mesh is shown in fig 1 the discretization
method in ref 9 is employed in the lagrangian fluid code we use the
spatial coordinate of r  xi j k yi j k zi j k the vector r is
nomal to r
figure 1 lagrangian mesh
the definition points of the discretized physical quantities in the lagrange
and euler codes are presented in figs 2 and 3 respectively the subscripts i
j and k correspond to the positions in space and the subscript n corresponds
to time n  dt the displacements in the i j and l directions are defined as
follows
dxn
 dxii 1 jk  xni1jk  xnijk
 i 21 jk
dyi 1 jk  dyii 1 jk  yi1jk
 yijk
dz n 1  dzi 1  z n
i 2 jk
i1jk  zijk
i 2 jk
 dxjij 1 k  xnij1k  xnijk
dxn
 ij 21 k
dyij 1 k  dyjij 1 k  yij1k
 yijk
dz n 1  dzj 1  z n
ij 2 k
ij1k  zijk
ij 2 k
 dxkijk 1  xnijk1  xnijk
dxn
 ijk 21
 yijk
dyijk 1  dykijk 1  yijk1
dz n
1  z
 zn
1  dzk
ijk 2
ijk 2
ijk1
ijk
figure 2 definition points of discretized physical quantities in the lagrangian code
figure 3 definition points of discretized physical quantities in the eulerian code
in the lagrange code the derivatives in x y and z are as follows
i x j x k x
1 y z
y z 
y z y z 
y z y z 
j j k k j i
k i
i k j
i j
j i k
dix  djx  dkx
i y j y k y
1 z x z x 
z x z x 
z x z x 
j j k k j i
k i
i k j
i j
j i k
diy  djy  dky
i z j z k z
1 x y x y 
x y x y 
x y x y 
j j k k j i
k i
i k j
i j
j i k
diz  djz  dkz
the generalized formula is as follows
dir  djr  dkr
dix
djx
dkx
dir   diy   djr   djy   dkr   dky 
diz
djz
dkz
31 lagrangian code and ok3
1 bc lccpp
the boundary conditions are included in the procedure
2 beammakingcpp
the function calculates the total input energy
3 constanth
the file contains the definition of constant values and normalization
factors
4 derfc
the file contains the error function in the double precision
5 hifschemeh
the file contains 1 2 3 6 12 20 32 60 and 120beam irradiation
schemes see also refs 6 7 8
6 imokcpp
the file contains a procedure to transfer the lagrange mesh date the
file sets the initial target surface numerically
7 initmesh lccpp
the file initializes the lagrangian coordinates and determines the number of the target layer the number of the layers can be selected from
1 to 5 layers the user must set the mesh number of each layer in this
file
8 inputok3h
the input data file contains the target parameters the hib parameters
9 insulationcpp
the file contains a procedure to calculate the adiabat  to evaluate the
fuel preheating 1 2
10 lagrange setcpp this function performs auxiliary calculations for
spatial differentiation and thermal conductivity calculations in the lagrange code
11 legendrecpp
the procedure performs the mode analyses based on the spherical harmonics in order to find the implosion nonuniformity the analysis
results are also output in this procedure
12 lr lccpp
a procedure to calculate the rosseland mean free path see ref 11
13 mscpp
a function to solve matrix by the gauss elimination method this
function is optimized specifically for langnge calculations
14 ms tdmacpp
a function to solve matrix by tdma tridiagonalmatrix algorithm
15 ok3codecpp
the file is the main routine of the hibs illumination code of ok3
and contains the following procedures6 7 8 the details for each
procedure relating to the hibs illumination code ok3 are found in
ref 1 6 7 8 the relating procedures are listed here irradiation initedp1 focus fdis divider kbunch pointc
pointf pointalpha beamcenterrot beamletrot  rotation
and stoppingpower1cpp the procedure of stoppingpower1cpp contains a function stop1 this function serves a heart of the ok1 code
6 and describes the energy deposition model it calculates the stopping power from the projectile ions into the solid target the oneion
stopping power is considered to be a sum of the deposition energy in
the target nuclei the target bound and free electrons and the target
ions12
16 pelletsurfaceh
the file sets the initial target surface numerically
17 rmscpp
the procedure in this file calculates the rootmeansquare rms deviation in target non uniformity
18 resultimpcpp
this file contains a procedure to calculate the implosion velocity
19 slccpp
this file contains the procedure to output the time history of each
physical quantity obtained by cutting one each in  and  directions
the positions of  and  are changed in input lch
20 accelerationcpp
a procedure for calculating the target acceleration
21 artv lccpp
this file contains a procedure calculate the artificial viscosity when
dealing with shock waves propagating in a compressive fluid at a supersonic speed in fluid dynamics simulations it is impossible to employ
sufficient number of multiple meshes to describe the real shock front
structure because its thickness is very thin as a method we introduce the following artificial viscosity devised by von neumann and
richtmyer13
the threedimensional artificial viscosity is written
qa 
c21
qb 
c21
qc 
c21
 min
 min
 min
ri  ui
rj  uj
rk  uk
here ri  rj and rk are the normal vectors to the i j k directions respectively qa  qb and qc are the artificial viscosities in the directions of
ri  rj and rk  respectively equations 6 7 and 8 are discretized
as follows
qa ni 1 j 1 k 1 
 2 2 2
qa1 ni 1 j 1 k 1  qa2 ni 1 j 1 k 1  qa3 ni 1 j 1 k 1  qa4 ni 1 j 1 k 1
qb ni 1 j 1 k 1 
 2 2 2
qb1 i 1 j 1 k 1  qb2 i 1 j 1 k 1  qb3 i 1 j 1 k 1  qa4 i 1 j 1 k 1
qc ni 1 j 1 k 1
qc1 ni 1 j 1 k 1  qc2 ni 1 j 1 k 1  qc3 ni 1 j 1 k 1  qa4 ni 1 j 1 k 1
here the expression appeared are summarized below
divi
qa1 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddivi
j 1 k 1
j 1 k 1
qa2 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddivi
divi
j 1 k 1
j 1 k 1
qa3 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddivi
divi
j 1 k 1
j 1 k 1
qa4 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddivi
divi
j 1 k 1
j 1 k 1
djvi
qb1 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddjvi
j 1 k 1
j 1 k 1
djvi
qb2 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddjvi
j 1 k 1
j 1 k 1
qb3 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddjvi
djvi
j 1 k 1
j 1 k 1
qb4 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddjvi
djvi
j 1 k 1
j 1 k 1
qc1 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddkvi
dkvi
j 1 k 1
j 1 k 1
qc2 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddkvi
dkvi
j 1 k 1
j 1 k 1
qc3 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddkvi
dkvi
j 1 k 1
j 1 k 1
qc4 ni 1 j 1 k 1  ni 1 j 1 k 1 c21 ddkvi
dkvi
j 1 k 1
j 1 k 1
rii 12j 1 k 1 
rii 12j 1 k 1 
rii 12j 1 k 1 
rii 12j 1 k 1 
rj i 12j 1 k 1 
rj i 12j 1 k 1 
rj i 12j 1 k 1 
rj i 12j 1 k 1 
divi
 min 
j 1 k 1
 min 
divi
j 1 k 1
 min 
divi
j 1 k 1
divi
 min 
j 1 k 1
 min 
djvi
j 1 k 1
 min 
djvi
j 1 k 1
 min 
djvi
j 1 k 1
 min 
djvi
j 1 k 1
n 1
u n 2
i i 1 j1k
n 1
rii 1 j 1 k 1
u n 2
i i 1 j1k1
rii 1 j 1 k 1
n 1
u n 2
i i 1 jk1
rii 1 j 1 k 1
n 1
u n 2
j ij 1 k
rj i 1 j 1 k 1
n 1
n 1
u n 2
j i1j 1 k1
n 1
u n 2
j ij 1 k1
rj i 1 j 1 k 1
  n12 1 1 
i j k
  n12 1 1 
i j k
u n 2
k ijk 1
  n 1 1 1
i 2 j 2 k 2
u n 2
k i1jk 1
  n 1 1 1
i j k
rj i 1 j 1 k 1
u n 2
j i1j 1 k
rj i 1 j 1 k 1
dkvi
 min 
j 1 k 1
u n 2
i i 1 jk
rii 1 j 1 k 1
 min 
dkvi
j 1 k 1
n 1
  n12 1 1 
i j k
  n12 1 1 
i j k
dkvi
 min 
j 1 k 1
 min 
dkvi
j 1 k 1
ddivij
k 21
ddjvi
jk 21
u n 2
k i1j1k 1
  n 1 1 1
i 2 j 2 k 2
u n 2
k ij1k 1
  n 1 1 1
i j k
 divi
j 21 k 21
divi
j 21 k 21
ddivi
j 1 k 1
ddivij
1  ddiv
k 2
i1j 2 k 2
 djvi
 djvi
j 21 k 21
j 21 k 21
ddjv
ddjvi
ddjv
j 21 k 21
i 12 j1k 21
i 12 jk 21
ddkvi
 dkvi
 dkvi
j 21 k
j 21 k 21
j 21 k 21
ddkv
ddkv
ddkvi
i 2 j 2 k
j 2 k 2
i 2  2 jk1
for the normal vectors to the i j and k directions the outer products
are used at each side as shown in fig 4 and the averaged values are
obtained
riij 1 k 1
rj i 1 jk 1
  n 1 1 
i j k
r a1 ij 1 k 1  r a2 ij 1 k 1  r a3 ij 1 k 1  r a4 ij 1 k 1
r b1 i 1 jk 1  r b2 i 1 jk 1
 r b3 i 1 jk 1  r b4 i 1 jk 1
rc1 i 1 j 1 k  rc2 i 1 j 1 k  r c3 i 1 j 1 k  r c4 i 1 j 1 k
figure 4 the nomal vector to the i direction
22 coc lccpp
the file calculates the lagrangian mesh dynamics the lagrangian
meshes move together with the fluid motion the new position coordinates for each mesh point are renewed at n  1
23 cotc3d ecpp cotc3d rcpp
for calculation of the heat conduction the following basic equation is
used14
   k tk 
k  e r
e  183  1010 te52 log 1 z 1 wmk
r  lr tr3 wmk
cvk
  heatconductivity
tk  ion electron radiation temperaturek
log   coulomb logarithm
m  mass
z  ionization degree
  stef an  boltzmann constant
lr  rosseland mean free path
here if s is the area vector of each surface of the mesh the basic
equation is transformed as follows
zzz
mcv
  t 
zzz
  t dv
t   si
1 x
si 
dir
 djr
 dkr
mcv i
equation 25 is discretized as follows
 ti
j 1 k 1
j 1 k 1
n 21
m cv
a2 ti
1 t
i 2 j 2 k 2
j 2 k 2
a1 ti
1  t
i 2 j 2 k 2
j 2 k 2
b2 ti
1  t
i 2 j 2 k 2
j 2 k 2
b1 ti
i 12 j 21 k 21
j 21 k 21
c2 ti
i 12 j 21 k 21
j 21 k 23
c1 ti 1 j 1 k 1  ti 1 j 1 k 1
here the coefficients in eq 26 are listed
a2 
dir ni1j 1 k 1
ni1j 1 k 1
sini1j 1 k 1
ji1j
k 1
a1  dir nij 1 k 1 sinij 1 k 1
ji1j
k 1
ni 1 j1k 1
b2  djr ni 1 j1k 1 sji
j1k 1
nij 1 k 1
j1k 1
b1  djr ni 1 jk 1 sji
jk 1
jk 1
ni 1 j 1 k1
c2  dkr ni 1 j 1 k1 ski
j 1 k1
c1  dkr ni 1 j 1 k ski
j 1 k
j 1 k1
ni 1 jk 1
ni 1 j 1 k
j 1 k
24 define lch
it contains the procedure declarations for the lagrangian code and
ok3
25 dif lccpp
the following lagrangian equation of motion is used
 p  q
equation 27 is expressed as follows
p  q
dir p  qa   dir p  qb   dir p  qc 
mijk
ijk
ijk
equation 28 is discretized as follows
n 1
uijk2
n 1
uijk2
dtn
dir p  qa   dir p  qb   dir p  qc 
mijk
ijk
here each term is shown
dir p  qa 
dir p  qa1 
ijk
ij 21 k 21
dir p  qa2 
ij 1 k 1
 2 2
dir p  qa3 
ij 1 k 1
 2 2
dir p  qa4 
ij 1 k 1
djr p  qb 
djr p  qb1 
ijk
i 1 jk 21
djr p  qb2 
i 1 jk 21
djr p  qb3 
i 1 jk 21
djr p  qb4 
i 1 jk 1
dkr p  qc 
dkr p  qc1 
ijk
i 1 j 1 k
 2 2
dkr p  qc2 
i 1 j 1 k
 2 2
dkr p  qc3 
i 1 j 1 k
 2 2
dkr p  qc4 
i 1 j 1 k
26 dt lccpp
this procedure calculates and controls the time step to satisfy the
numerical stability condition the time step t in the calculation must
satisfy the following conditions
cs  vmax
the time step for the lagrangian method dtn 2 is represented by the
following expression
dtn 2  
drmin
cs  vmax
drmin 
cs 
vmax 
numerical coefficient constant   1
the minimum grid spacing
sound speed
the maximum flow speed
27 eoenergy lccpp
the file contains a procedure for calculation of the energy equation
the following lagrangian energy equation is used except for the heat
conductions terms
pi q dj
dti
cvi
m dt
 dt
 dt
pe dj
dte
 dtr   kb bt d  pr dj
cvr
m dt
equation 35 is discretized as follows
j 1 k 1
 ti
j 1 k 1
n 21
cv i 1 j 1 k 1
 ni 1 j 1 k 1 
bt n1
i 1 j 1 k 1 i 1 j 1 k 1
n 1
n 1
pi 12j 1 k 1  qi 12j 1 k 1
mi 1 j 1 k 1
 ji
j 1 k 1
j 1 k 1
28 eoscpp
the file contains the procedures to calculate the equation of state the
equation of state for ions is the ideal one for the equation of state
for electrons and the ionization we use the equation of state based
on the thomasfermi model shown in ref 15 users can select the
thomasfermi model or the ideal equation of state in the header file of
input lch for the equation of state for the radiation we use the
equilibrium blackbody equations 11
29 init lch
it contains the initial conditions such as the initial target temperature
and so on
30 init matrix lccpp the file get the matrix
31 input lch
the input data for lagrangian code contains radius  and  direction mush number each layers mesh numberhib number beam pulse
parameters fuel target structure output date step etc
32 jacobian lccpp
the volume of each mesh is calculated the jacobian j is expressed
by the following formula
x y z
i j k
x y z x y z x y z x y z x y z x y z
i j k j k i
k i j
k j i
j i k
i k j
from eq 36 the jacobian is expressed as follows
jk 1 l 1 m 1 
i i 1 j 1 k 1 j i 1 j 1 k 1 k i 1 j 1 k 1
 n 2 2 2  n 2 2 2  n 2 2 2
j i 1 j 1 k 1 k i 1 j 1 k 1 i i 1 j 1 k 1
 n 2 2 2  n 2 2 2  n 2 2 2
k i 1 j 1 k 1 i i 1 j 1 k 1 j i 1 j 1 k 1
 n 2 2 2  n 2 2 2  n 2 2 2
k i 1 j 1 k 1 j i 1 j 1 k 1 i i 1 j 1 k 1
 n 2 2 2  n 2 2 2  n 2 2 2
j i 1 j 1 k 1 i i 1 j 1 k 1 k i 1 j 1 k 1
 n 2 2 2  n 2 2 2  n 2 2 2
i i 1 j 1 k 1 k i 1 j 1 k 1 j i 1 j 1 k 1
here each term is obtained
i xn 1
i xn 1
i xn 1
i xn 1
i 2 jk1
i 2 j1k1
i 2 jk
i 2 j1k
xijk n
 i i 1 j 1 k 1 
j xn
1 k j xij 1 k1 j xi1j 1 k1 j xij 1 k
i1j 2
xijk n
 j i 1 j 1 k 1 
k x
k x
k x
1 k xijk 1
ij1k 1
i1j1k 2
i1jk 1
xijk n
i 2 j 2 k 2
i y 1
i y 1
i y 1
i y 1
i 2 jk1
i 2 j1k1
i 2 jk
i 2 j1k
yijk n
i 2 j 2 k 2
j y
yijk n
i 1 j 1 k 1
yijk n
i 1 j 1 k 1
zijk n
i 1 j 1 k 1
zijk n
i 1 j 1 k 1
zijk n
i 1 j 1 k 1
1 k
i1j 2
j y
1 k1
ij 2
j y
i1j 1
2 k1
j y
1 k
ij 2
1 k y
1 k y
i z n
i z n
k z n
j z n
j z n
j z n
j z n
k z n
k z n
k z n
k y n
i1jk 2
i z n
1 j1k
i 2
i1l 1
2 k
i1jk 2
ij1k 2
i 1
2 jk1
1 k1
ij 2
ijk 1
i1j1k 2
i 1
2 j1k1
ij1k 2
1 k y
i1j 1
2 k1
1 lm
k 2
i1j1k 1
1 k
ij 2
k z n
ijk 2
33 main lccpp
the main procedure of the lagrangian fluid code if you want to artificially add nonuniformity in the  and  directions without using the
ok3 code change it here
34 outputrmscpp
it contains a procedure to output the results for the rms nonuniformity
35 output lccpp
the result data are stored by this procedure the time interval of
data output is 01 ns in the lagrangian code the user can adjust
the output step in input lch the physical quantity for example
velocity defined at the grid points of the mesh is output to outputs1
the physical quantity defined at the center of the mesh for example
temperature density is output to outputs2
36 output to eulercodecpp
this file contains a procedure for outputting the data used in euler
code after the beam irradiation is completed the file is output every
01ns
37 relaxcpp
the following equation is used as the basic equation for the temperature
relaxation10
dti
cvi dt  kie
 kie  kre
cve dt
dtr
cvr dt  kre
here kie is the energy exchange rate between the ions and the electrons and kre the energy exchange rate between the radiation and the
electrons
kie  cvi ie ti  te 
kre  cvr re te  tr 
ie and re are the collision frequencies between the ions and the electrons and between the radiation and the electrons respectively they
are obtained by the following formulae the compton effect between
the radiation and the electrons is included each expression and the
solution method are found in refs 10 1
32 conversion code
the euler meshes are constructed based on the size of the small lagrange
mesh in the conversion code the 3d conversion process is performed after
setting the upper limit of the euler total mesh number in order to meet the
computer resource limitation this prescription is employed in the osukin
3d code
1 boundary setcpp the function makes the boundary point data between dt and al layer
2 check quantitiescpp the function outputs the data of the transformed euler mesh as a text csv file
3 define converth define the variables necessary for the conversion
code
4 generateeulermeshcpp the procedure determines the number of
the euler meshes and to secure the necessary memory just before the
data conversion
5 interpolationcpp the function interpolates the data on the lagrangian
mesh to those on the euler meshes figure 5 shows the interpolation method from the lagrange data to the euler data the meshsearchcpp provides the relation between the lagrangian mesh location and the euler mesh location the following interpolation equation
is used to obtain each physical quantity on the euler meshes for
example here u shows a velocity
sumr
 1 2
 1 2
uijk 
ui1jk 
ui1j1k
rijk
ri1jk
ri1j1k
 1 2
 1 2
uij1k 
uijk1 
ui1jk
rij1k
rijk1
ri1jk1
ui1j1k 
uij1k1
ri1j1k
rij1k1
up  
ri1jk
ri1j1k
rij1k
rijk1
ri1jk1
ri1j1k1
rij1k1
sumr 
rijk
figure 5 interpolation of velocity
usually the euler mesh size is small compared with the size of the lagrange mesh for the interpolation of physical quantities other than
velocity the physical quantity of the corresponding lagrange mesh
acquired by the meshsearchcpp is interpolated by the 0th order
method on the other hand if the corresponding lagrange mesh is
smaller than the euler mesh it is done in the same way shown in fig
5 and eq 40 for the example velocity interpolation this is the
special treatment in 3d to optimize the required memory size
6 main convertcpp this is the main procedure of the conversion code
the procedure selects the output lagrangian data transferred to the
euler code among the lagrangian data sets obtained in the lagrangian
code the lagrangian meshes are deformed along with the fluid motion
the lagrangian code stops before no mesh is crushed the conversion
range is the all dt layer and a part of the aluminum region the
volume of the al region is 25 times larger than the thickness of the
dt layer the required number of the euler meshes is calculated the
lagrange data sets are examined from the data set from the time of
2ns earlier than the last output data set the function selects the
conversion date which has the smallest number of the euler mesh
required if the number of euler meshes exceeds the number of euler
meshes set in the input lch the euler mesh total number is forced
to set to the upper limit defined beforehand
7 meshsearchcpp this procedure examines the location of each euler
mesh among the lagrangian meshes the meshsearch function divides
a lagrange mesh into 12 triangular tetrahedra as shown in fig 6 and
examines if the definition point of an euler mesh is contained in the
specific lagrange mesh
figure 6 one lagrange mesh and 12 triangular tetrahedra
in fig 7 p represents a coordinate vector of a specific euler mesh and
 represents a coordinate vector of the lagrangian mesh the point1
point2 point3 point4 and vp are the positions specified in fig 7 and
vectors composed of the position vectors are as follows
v11  rpoint2  rpoint1 
v21  rpoint3  rpoint1
 point3  r
 point1
 point4  r
 point1
v12  r
v22  r
 point1
 point1
vp 1  p  r
vp 2  p  r
v31  rpoint4  rpoint1 
v41  rpoint4  rpoint2
 point1  r
 point1
 point3  r
 point2
v32  r
v42  r
 point1
 point2
vp 3  p  r
vp 4  p  r
figure 7 an euler mesh point p in a tetrahedron of the lagrange mesh
if the point p is in the triangular pyramid the following conditions are
met
12  vp 1
 v21  v22  vp 2
31  v32  vp 3
 v41  v42  vp 4
8 outputcpp in this procedure the converted data is output
9 read variablecpp this procedure reads the file data output by the
lagrange code after the lagrangian data set selection
33 eulerian code
1 boundarytrackingcpp
it is a function to track the material boundary surfaces each boundary
point is specified by the coordinates of the three variables boundarymesh i
boundarymesh j boundarymesh k the function interpolates the
velocities u v and w at the coordinates by the volume interpolation
and tracks the position of each boundary point in fig 8 dotted lines
represent the material boundaries when the boundary point exists at
the position shown in fig 9 the boundary point velocity ub  vb  wb 
is calculated by the volume interpolation method and is obtained by
the following equations
ub 
vb 
wb 
vu1 ui1j1k1  vu2 uij1k1  vu3 uijk1  vu4 ui1jk142
vu5 ui1j1k  vu6 uij1k  vu7 uijk  vu8 ui1jk
vv1 vi1j1k1  vv2 vij1k1  vv3 vijk1  vv4 vi1jk1 43
vv5 vi1j1k  vv6 vij1k  vv7 vijk  vv8 vi1jk
vw1wi1j1k1  vw2 wij1k1  vw3 wijk1
vw4wi1jk1  vw5 wi1j1k  vw6 wij1k  vw7 wijk
vw8wi1jk
figure 8 material boundary points
figure 9 velocity interpolation by the volume interpolation
2 generatematrixcpp
the mesh total numbers of im jm km are loaded from the converted
data in generatematrix all the variables required in the euler code
are defined based on the number im jm km
3 ms tdmacpp
a function to solve matrixes by tdma tridiagonalmatrix algorithm
4 materialrecognationcpp
a function to discriminate each material by the material boundary
lines
5 paintmaterialcpp
the material is specified between the two material boundary lines in
the procedure
6 rmfp ecshcpp
a procedure to calculate the rosseland mean free path see ref 11
7 scanlinecpp
a procedure that specifies the material on each euler mesh
8 artv ecshcpp
this file contains a procedure to calculate the artificial viscosity the
threedimensional artificial viscosity is written as follows
qx  cq
 cl cs  
 cl cs  
qy  cq2
qz  cq2
 cl cs  
here the discretized artificial viscosities are shown below
qx ni 1 j 1 k 1
 ni 1 j 1 k 1 cq
uni1j 1 k 1  unij 1 k 1 2
ni 1 j 1 k 1 cl cs uni1j 1 k 1  unij 1 k 1
qy ni 1 j 1 k 1
 ni 1 j 1 k 1 cq
uni 1 j1k 1  uni 1 jk 1 2
ni 1 j 1 k 1 cl cs uni 1 j1k 1  uni 1 jk 1
qz ni 1 j 1 k 1
ni 1 j 1 k 1 cq
uni 1 j 1 k1
uni 1 j 1 k 2
ni 1 j 1 k 1 cl cs uni 1 j 1 k1  uni 1 j 1 k
9 define ecshh
it contains the constant values the normalization factors and the procedure declarations required
10 dif ecshcpp
the following equations of motion are used
1  p  q
  x
1  p  q
1  p  q
equations 52 are discretized as follows
n 21
uij 1 k 1
n 12
n 12
 uij 1 k 1  dt
x ij 1 k 1
y ij 1 k 1
 2 2
n 21
ffn 21
1 p  q
z ij 1 k 1
ij 1 k 1
n 21
here
n 21
ij 21 k 21
n 1
uij2 1 k 1  0
i 2 j 2 k 2
n 1
n 2
1 ui1j 1 k 1
n 21
i1j 1
2 k 2
n 2
ij 21 k 21
dx 1
1 k 1
i 2 j 2
n 21
n 1
uij2 1 k 1  0
ij 21 k 21
n 1
n 1
u 2 1
u 21
ij 2 k 2
i1j 2 k 1
uij2 1 k 1
dx 1
n 1
n 1
u 21
u 21
n 12
ij 2 k 1
ij 2 k 2
vij 1 k 1
dy 12 1
i 2 j 2 k 2
n 1
n 1
3 k 1 uij 1 k 1
n 12
ij 2
n 1
ij 21 k 21
dy 12 1
i 2 j 2 k 1
n 21
n 1
vij21 k 1  0
n 12
vij 1 k 1  0
ij 21 k 21
n 2
n 1
u 21
1 uij 1 k 1
w 2
n 1
 ij 21 k 21
dz 12 1
i 2 j 2 k 2
n 2
n 1
1 k 3 uij 1 k 1
n 21
ij 2
ij 21 k 21
dz n 21
i 2 j 1
2 k 2
n 21
wij 1 k 1  0
n 21
wij 1 k 1  0
n 1
1 p  q
 n 1
n 1
ij 21 k 21
i 12j 1 k 1  i 12j 1 k 1
n 12
n 21
n 21
n 1
 pi 1 j 1 k 1  qi 1 j 1 k 1  pi 1 j 1 k 1  qi 12j 1 k 1 
n 12
dxij 1 k 1
11 eod ecshcpp
the following continuity equation is used
u v w
x y
equation 56 is discretized as follows
i 12 j 21 k 21
 dt
x i 1 j 1 k 1
 2 2 2
y i 1 j 1 k 1
z i 1 j 1 k 1
x i 1 j 1 k 1
y i 1 j 1 k 1
z i 1 j 1 k 1
ni 1 j 1 k 1
ni 1 j 1 k 1
 wi
j 1 k1
j 1 k
dzi
j 1 k 1
i 21 j 21 k 21
n 1
1 k 1 i 1 j 1 k 1
i 2 j 2
 ui 1 j 1 k 1
dxn 1
ij 2 k 2
n 3
1 k 1 i 1 j 1 k 1
dxn
i 12 j 21 k 21
i1j 1
uni 1 j 1 k 1
uni 1 j 1 k 1
i 12 j 21 k 21
n 1
1 i 1 j 1 k 1
i 2 j 1
2 k 2
 vi
dy 1
j 1 k 1
 vi
j 1 k 1
i 21 j 21 k 21
dyi
j 1 k 1
 vi
j1k 1
jk 1
i 21 j 21 k 21
dxni 1 j 1 k 1
i 21 j 21 k 21
uni1j 1 k 1  unij 1 k 1
i 2 jk 2
n 1
1 k 1
i 2 j 2
i 2 j 2 k 1
dy n 1
i 2 j1k 2
j 21 k 21
j 1 k 1
i 21 j 21 k 21
n 1
1 k 1 i 1 j 1 k 1
i 2 j 2
 wi 1 j 1 k 1
dz n
1 j 1 k
i 2
n 1
1 k 3 i 1 j 1 k 1
i 2 j 2
dz n 1
i 21 j 21 k 21
i 2 j 1
12 eoenergy ecsh
j 21 k 21
j 1 k 1
the following basic energy equations are used
pi  q
bti 
  u
  u   ti 
cvi
  u
  u   te 
bte 
cve
  u
  u   tr 
btr 
cvr
here bti  0 in hif the discretized energy equation for the ion
temperature for example becomes as follows
ti i 1 j 1 k 1  ti i 1 j 1 k 1  dt
x i 1 j 1 k 1
y i 1 j 1 k 1
z i 1 j 1 k 1
2 n
i i 1 j 1 k 1
i 12 j 21 k 21
cvi i 1 j 1 k 1
ni 1 j 1 k 1
x i 1 j 1 k 1 y i 1 j 1 k 1
z i 1 j 1 k 1
i 1 j 21 k 21
 un
i 12 j 21 k 21
 uni 1 j 1 k 1
uni 1 j 1 k 1  0
uni 1 j 1 k 1  0
i 1 j 21 k 21
 vn
1 ti i 1 j 1 k 1
i 1
2 j 2 k 2
dy n1
i 2 jk 2
ti n 1
3 k 1 ti i 1 j 1 k 1
i 2 j 2
dy n 1
i 2 j1k 1
ti n
i 21 j 21 k 21
 vi
j 1 k 1
1  0
j 2 k 2
1  0
j k
i 1 j 1 k 1
2 2 2
ti n 1
1 ti i 1 j 1 k 1
i 2 j 1
2 k 2
 i 1 j 1 k 1
dz n1
i 2 j 2 k
ti 1
3 ti i 1 j 1 k 1
i 2 j 1
2 k 2
 wi
j k
1 j 1 k 1 ti i 1 j 1 k 1
i 2
dxn 1
ij 2 k 2
ti n 3
1 ti i 1 j 1 k 1
i 2 j 1
dxn
1 k 1
i1j 2
ti n
i 2 j 2 k1
uni1j 1 k 1  unij 1 k 1
dxij 1 k 1
i 21 j 21 k 21
vi 1 j1k 1  vi
jk 21
dyi
i 21 j 21 k 21
jk 21
wi 1 j 1 k1  wi
j 21 k
dzi
i 21 j 21 k 21
j 21 k
j 21 k 21
j 1 k 1
13 eos ecshcpp
the same equation is used as the equation of state in the lagrangian
code
14 fusioncpp
the fusion reactions are calculated in this procedure the details are
shown in ref 1 the fusion reaction formulae for deuterium and
tritium are shown below
d  d  t101mev  p302mev
 he3 082mev  n245mev
d  t  he4 35mev  n141mev
d decreases due to the dd and dt reactions from the expression 62
the number density nd change is given bellow
 ndd  ndt
  hvidd nd nd  hvidt nd nt
considering the diffusion term of  particles and the term of  particle
absorption n is described as follows
 hvidt nd nt    f   n
the discretized  particle reaction is written as
 n ni 1 j 1 k 1  tnd ni 1 j 1 k 1 nt ni 1 j 1 k 1 hvidt ni 1 j 1 k 1 
n n1
i 1 j 1 k 1
the dd and the dt reaction rates are shown in refs 1 16 the
flux of the  particle is shown below f 
f  d n
here d is the diffusion coefficient and is expressed by the following
equation
3  
 34  n
here v is the speed of  particle and  the mean free path of 
the second term of the denominator in eq 67 expresses the flux
limiting effect which limits the excess flux by the steep gradient of the
 density the flux f of the  particles in the x y and z directions
are expressed by the following equations
fx 
n v 
3   
n  34  n
n v 
3   
fy  
fz  
3  y
n v 
3   
n  34  n
the energy increases by the  particle energy deposition are shown
below
e n fi
cvi
e n fe
te 
cve
ti 
here f represents the distribution factor of the  particle energy among
ions and electrons 17
fi 
te kev 
fe  1  fi
the discretized energy increases for ions and electrons are described as
follows
ti n1
i 21 j 21 k 21
ti ni 1 j 1 k 1
e n ni 1 j 1 k 1 fi ni 1 j 1 k 1
te n1
 te ni 1 j 1 k 1  t
i 1 j 1 k 1
e n ni 1 j 1 k 1 fe ni 1 j 1 k 1
ni 1 j 1 k 1 cve ni 1 j 1 k 1
15 init ecshcpp
the file initializes the eulerian code
16 load convertcpp
a procedure to read the converted data
ni 1 j 1 k 1 cvi ni 1 j 1 k 1
17 main ecshcpp
the main function of the eulerian code
18 output ecshcpp
the results are stored in this procedure
4 shell script files for setup and postprocessing
a shell file is prepared for the integrated run throughout from the lagrange conversion and euler codes however each code can be also run
manually one by one after finishing all the simulation process users may
need to visualize the simulation data some of the data computed are visualized by the following shell scripts all shell files require gnuplot 46 or
later
41 calculation set up shell
1 setup fusionh the shell file remove the calculation output date and
makes the output file
42 visualization for the lagrange code data
all the visualized data images are stored in the pic la directory
1 adiabatsh
the visualized graph for the time history of the adiabat  calculated
in insulationcpp in the lagrangian code
2 animation ti modesh
the shell file visualizes the mode analysis results of the ion temperature
calculated by legendrecpp in the lagrangian code
3 implosionvelocitysh
the shell plots the time histories of the implosion speed averaged over
the azimuthal direction for the dt inner surface the dt outer surface
and the averaged dt speed
4 rmsoutputsh
the shell file plots the time histories of the rootmeansquare rms
for the ion temperature and the mass density in the dt layer and al
layer the rms data is calculated by rmscpp in the lagrangian
code
5 slc t rsh
the shell file outputs the images of the r  t diagrams representing
the time history of the lagrangian meshes at  30 60 120 and 150
degrees and at  10 100 190 and 280 degrees to execute the shell
file users need to specify the boundary mesh number of each material
in the lagrangian code
43 visualization for the euler code data
all visualized data files are stored in the pic eu directory
1 animation atomic xysh
the shell file visualizes the distributions of the atomic number on the
xy plane for each output data in the euler code
2 animation atomic yzsh
the shell file visualizes the distributions of the atomic number on the
yz plane for each output data in the euler code
3 animation rho xysh
the shell file visualizes the distributions of the mass density on the xy
plane for each output data in the euler code
4 animation rho yzsh
the shell file visualizes the distributions of the mass density on the yz
plane for each output data in the euler code
5 animation ti xysh
the shell file visualizes the distributions of the ion temperature on the
xy plane for each output data in the euler code
6 animation ti yzsh
the shell file visualizes the distributions of the ion temperature on the
yz plane for each output data in the euler code
7 fusiongainsh
the shell file plots the history of the fusion energy gain
8 rhorsh
the shell file plots the history of the r
5 instructions for the user
before running the osuki code the user must set the target pellet and
hib parameters accordingly as follows
aok3 code calculation type in 3d osukin code one can select the ok3 illumination code calculation type the ok swich  1 is the full calculation with
ok3 the ok swich  5 is the 1d uniform energy distribution type and the
hibs energy distribution changes only in the radius direction the ok swich 
10 is the 1d energy distribution with the illumination nonuniformity in the  and
 directions one can add artificially nonuniformity in the  and  directions in
main lccpp
bprojectile ion type five projectile ion types are included in ok3pb u cs
c and p users can choose one of them or add other species expanding the arrays
azb and aab in input lch
cion beam parameters the user can specify the hib radii on the target surface
changing the parameter tdbrc in input lch the design of the beam input
pulse is also done in the same file the pulse rise start time rise time and beam
power are set by variables t beamj del t beamj and p owerjj  1  5 respectively users should also input the total input beam energy into input energy in
the define ecshh manually when the users want to run the euler code independetly as the parameter value of the wobbling beam the maximum radius of
the beam axis trajectory in the rotation and the oscillating frequency should be
specified users can set the desirable values for the maximum beam trajectory
radius rrot in the inputok3h and the rotational number rotationnumber in
the input lch
dthe beam irradiation position the file hifschemeh contains 1 2 3 6 12 20
32 60 and 120beam irradiation schemes users can choose one of them or add
other hib irradiation schemes supplementing the file
ethe reactor chamber users can specify the chamber radius by changing the parameter of rch the parameter dz fixes the pellet displacement from the reactor
chamber center in the cartesian ps coordinates see fig 10 in ok3 the target
alignment errors of dx dy and dz can be specified one can change this setting in
the input lch
fthe target pellet structure and mesh number the parameter values of target are set in input lch and init lch in input lch users can change
the boundary radius of each layer the total mesh number and the mesh number for each layer the present osukin 3d includes an example dtalpb
structure target defined by target layerthickness parameters rin rbc1 rbc2
and rout users can add other target materials by expanding the arrays of
azt0 aztm aat au i aro and sc in inputok3h
gthe maximal euler mesh number the maximal euler mesh number is set in
input lch the upper limit of the mesh number should be defined depending
on the resource limitation of the workstation used
figure 10 schematic diagram for the target misalignment
if users want to employ a new substance for target structure usera also need to
add the solid density and the atomic mass in constanth users can control
the lagrangian radial mesh number for each layer by changing the value m w c
in input lch when m w c  0 the radial mesh width dr1  dr2     
in all layers becomes equal when the mwc is large the radial mesh number for
each layer num k1  num k2      becomes close to the same number
users can run codeosukinfusionstartsh to start running the osukin 3d code simulations when the shell script is executed the lagrange fluid code the data conversion code and the euler fluid code are
sequentially activated the results of the lagrangian simulation are saved in
the output directory and the results of the eulerian simulation are saved
in output euler
6 testing the program osukin 3d
the several tests are shown below to present the target fuel implosion
dynamics in the example cases the hibs and the target fuel have the
following common parameters which are the same values employed in ref
1 the beam radius at the entrance of a reactor chamber ren  35 mm the
beam particle density distribution is in the gaussian profile and all projectile
pb ions have 8 gev the target is a multilayered pellet in which the pellet
outer radius is 4 mm a pb layer thickness is 0029 mm the al thickness is
0460 mm and the dt thickness is 0083 mm the pb al and dt layers have
the radial mesh numbers of 4 46 and 30 in these example cases respectively
and the total mesh number in the theta direction is 90 the input beam pulse
is shown in fig 12 in ref 1 the beam radius is 38mm on the target
surface however rb  38mm changes at wb to 37mm for the wobbling
beam irradiation here wb is the rotational period of the beam axis the
rotational frequency is 424mhz rotaionnumber  11
first the 3d langrange code was run without the ok3 illumination code
this is the case for ok switch  10 and we added the artificial nonuniformity y32 the spherical harmonics with the amplitude of 300 in
fig 11 the ion temperature distribution is shown at t35ns and in fig
12 the mass density distribution is presented at t35ns the target shape
is largely distorted due to the nonuniformity of the hibs deposition energy
distribution
figure 11 ion temperature in the 3d lagrange code without ok3 code at t35ns the
nonuniformity distiribution is y32 with the amplitude of 30
figure 12 mass density in the 3d lagrange code without ok3 code at t35ns the
nonuniformity distriution is y32 with the amplitude of 30
we also performed runthrough simulation tests in the example cases
the ok3 code was coupled with the runthrough simulations the implosion
data were obtained by the lagrange code and the data just before the void
closure time were transferred to the euler code through the data conversion
code two cases are computed for the target fuel implosion dynamics with
the spiral wobbling or without the oscillating hibs these examples are the
runthrough simulations with the ok3 illumination code ok switch  1
the input beam pulse employed in the runthrough tests is shown in fig
13 this beam input energy is 54mj we show the r  t diagram for the
case without the hibs wobbling in fig 14 the lagrangecode test results
stored in the output directory are visualized in figs 15 for the target ion
temperature ti  distributions at t  00 150 200 and 225 ns for the
case with the hibs wobbling behavior the rms nonuniformity results
are shown in figs 16 a for dt layers ion temperatureti  b for dt
layers mass density c for al layers ion temperatureti  and d for al
layers mass density when the hibs have the wobbling motion during the
implosion with the wobbling frequency of 424mhz the radius acceleration
distributions are shown in figs 17 a in the  direction and b in the 
direction at t  625tw  112ns solid lines and at t  675tw  122ns
dotted lines here tw shows the one rotation time figures 17 present
that the nonuniformity phase of the implosion acceleration is controlled
externally by the hibs wobbling behavior 1 18
figure 13 input beam pulse shape used in the example runthrough tests
figure 14 the r  t diagram for the implosion with the hibs wobbling illumination the
black line area shows the pb layer the blue line area al and the red line area is dt
figure 15 ion temperature distributions in the example runthrough test with the hibs
wobbling illumination at a t00ns b 150ns c 200ns and d 225ns
figure 16 rms nonuniformity histories of a the dt ion temperature b the dt mass
density c the al ion temperature and d the al mass density for the cases with the
wobbling hibs solid lines and without the wobbling hibs dotted lines
figure 17 radial acceleration distributions in a  and b  the solid lines show the
acceleration ditributions at t  625tw  113ns and the dotted lines at t  675tw 
122ns
after the lagrange code computation the implosion data are converted
and transferred to the euler code figures 18 show the ion temperature
distributions by the euler code figures 18 show that the dt fuel is ignited
and the gain obtained is about 175 in this example case for a realistic
hif reactor design the implosion parameters should be further optimized to
obtain a sufficient gain which should be larger than 3040 in hif 1 4 5 18
figure 18 ion temperature distributions a at t 2488ns b at 2844ns and at 2921ns
in order to check the accuracy of the 3d euler code we also performed the
euler code tests using the initial conditions of the 2d euler code the initial
conditions in the euler code are the output of the lagrangian code to this
end the 2d euler initial conditions were converted into 3d therefore the
physical values are uniform in the  direction the lagrangian test 2d results
for the target ion temperature ti  and the mass density  distribution at
t  29 ns are shown in figs 14 and 15 in ref 1 for the cases with and
without the wobbling hibs the 2d eulerian test results for the fusion
energy gain is shown in fig 16 in ref 1 in fig 19 we show the ion
temperature distributions by the 3d euler code the wobbling hibs are not
used in this simulation in this case the fuel is ignited at t 301ns the
histories of the fusion gain g of the 2d code and the 3d code are shown in
fig 20 the fusion gain was 525 by the 2d code and 576 by the 3d code
in addition we also did another test for the wobbling hibs see figs 15
and 16 in ref 1 and the fusion gain was 761 in 2d 1 and 674 in 3d
the results would confirm that the 3d euler code reproduces the 2d results
successfully for the ignition time and the fusion gain obtained
figure 19 ion temperature distributions by the 3d euler code without the hibs wobbling
at a t3042ns b 3053ns c 3235ns and d 3258ns
figure 20 fusion energy gain curves for the cases with 3d code a solid line and with
2d code a dotted line
we also simulated the doublecone ignition scheme19 using a 3d euler
code the doublecone ignition scheme was proposed by prof jie zhang
19 and the two compressed dt clouds are created by the gold cones the
two dt spherical clouds collide each other like the impact fusion 20 in
this example case the compressed dt maximum density of the dt fuel is
set to be 10  105 kgm3  with the gaussian spatial distribution the dt
ignition will be attained by an additional heating which is not taken into
consideration in this example the ion electron and radiation temperatures
are 10ev initially in the euler code the radius of the fuel is 92m and
the mass was 01mg we set the colliding speed w of the two dt fuel clouds
to 30  105 ms the ion temperature distributions are shown in fig 21
figure 21 ion temperature distributions for the doublecone ignition scheme 19 at a
t00ns b 1506ns c 2980ns and d 4678ns
7 conclusions
we have developed and presented the osukin 3d code which is useful
to simulate 3d spherical dt fuel target implosion in hif the osukin code is an upgraded implosion simulation system from the 2d osuki
code and consists of the lagrangian fluid code the data conversion from the
lagrangian code data to the euler code data and the euler code near the
void closure phase of the dt fuel implosion the dt fuel spatial deformation
is serious at the stagnation phase the dt fuel is compressed to about a
thousand times of the solid density the osukin 3d code would provide
a useful tool for the integrated dt fuel target implosion simulation in hif
declaration of competing interest
the authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work
reported in this paper
credit author statement
hiroki nakamura software for euler code and conversion code validation visualization ken uchibori software for lagrange code and conversion code validation visualization writing draft shigeo kawata basic idea conceptualization methodology investigation supervision writing
paper takahiro karino methodology supervision ryo sato methodology
validation alexander i ogoyski software for ok3 code validation
acknowledgments
the work was partly supported by jsps japanu s exchange program
mext core center for optical research and education utsunomiya
university shanghai jiao tong university and ileosaka university the
work was also partly done under the collaborations with xian jia tong
university inst of modern physics lanzhou inst of physics beijing
fudan university shanghai renmin university of china beijing and elibeamlines prague
references
1 r sato s kawata t karino k uchibori t iinuma h katoh and
ai ogoyski comput phys commun 240 2019 83100
2 s atzeni and j meyertervehn the physics of inertial fusion oxford
university press 2009
3 s kawata and k niu j phys soc jpn 53 1984 34163426
4 s kawata t karino and a i ogoyski matter and radiation at extremes 12 2016 89113
5 s kawata advances in physics x 61 2021 1873860
6 a i ogoyski t someya and s kawata comput phys commun 157
2004 160172
7 a i ogoyski s kawata and t someya compt phys commun 161
2004 143150
8 a i ogoyski s kawata p h popov compt phys commun 181
2010 13321333
9 w d schulz twodimensional lagrangian hydrodynamic difference
equations university of california lawrence radiation laboratory
livermore california ucrl6776 1963
10 n a tahir k a long e w laing j appl phys 60 1986 898
11 ya b zeldovich yu p raizer physics of shock waves and hightemperature hydrodynamic phenomena dover books on physics new
york 2002
12 ta mehlhorn j appl phys 52 1981 65226532
13 j von neumann and r d richtmyer j appl phys 21 1950 232237
14 j p christianen d e t f ashby and k v roberts computer
physics communications 7 1974 271287
15 a r bell rutherford laboratory report rl80091 1981
16 a s richardson 2019 nrl plasma formulary 2019
17 g s fraley e j linnebur r j mason r l morse phys fluids 17
1974 474489
18 r sato s kawata t karino k uchibori and a i ogoysk scientific
reports 6659 2019 httpsdoiorg101038s41598019432217
19 j zhang w m wang x h yang d wu y y ma j l jiao z
zhang f y wu x h yuan y t li and j q zhu rhilosophical
tran royal soc a 2020 httpsdoiorg101098rsta20200015
20 f winterberg z naturforschg 19a 1964 231239
