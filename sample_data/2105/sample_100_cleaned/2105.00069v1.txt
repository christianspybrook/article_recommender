unbiased deterministic total ordering parallel simulationssimultaneous eventsneil mcglohonchristopher d carothersrensselaer polytechnic institutetroy new york usamcglon2rpiedurensselaer polytechnic institutetroy new york usachriscarothersgmailcomarxiv210500069v1 csdc 30 apr 2021abstractarea discrete event simulation des event simultaneityoccurs events scheduled happenpoint simulated time simulation determinism expectationsemantically configured simulation guaranteedrepeatedly reproduce identical results events dessole mechanism state change ensuring consistent realtimeevent processing order crucial maintaining determinismsynonymous finding consistent total ordering eventswork extend concept virtual time utilizearbitrarylength series tiebreaking values preserve determinism parallel optimistically executed simulationsimposing additional bias influencing orderingincomparable events furthermore changing core pseudorandom number generator seed initialization different orderingsevents incomparable standard virtual time observedallowing fair probing potential simulation outcomesimplement evaluate extended definition virtual timerensselaer optimistic simulation rosssimulation models discuss importance deterministicevent ordering given existence event tiesccs conceptscomputing methodologies discreteevent simulationsimulation evaluation mathematics computing probabilistic algorithmskeywordsparallel discrete event simulation determinism event simultaneity order theoryintroductiondiscrete event simulation des effective method simulating wide variety phenomena quantifies occurrencesimulation event occurs simulation entityevent alters state according encoded contextoccurs temporal coordinate simulation definedoffset current definition time simulation statechanges event happens outcome simulationentirely dependent initial state set orderedevents altersexpected identically configured simulations produce identical results simulations property referreddeterministic common expectation models developed des maintaining determinism simulation helpconfirm additional errant undefined behavior occurring defined rules deterministic simulation givensingular input result singular answerhighlevel view maintaining determinism appearssimple task process events order scheduledoccur complications add complexityobjective parallel processing environment simulationpartitioned multiple processors events occurringentities exist processornature interprocessor clock drift individual processing delays ensuring deterministic ordering event executionrequires additional synchronization overheadfortunately generally solved problem parallel discreteevent simulation pdes synchronization methodsconservative parallel optimistic parallel executioncomplication event simultaneity events occurcoordinate virtual time given simultaneous eventsresult different noncommutative state changesoccurring entity final simulation results naturally dependordering eventsparallel environment interprocessor event arrivereceiving processor earlier timestamped eventprocessed violating virtual timeguaranteed happensbefore relation events correction methods like reversecomputation checkpoints revert simulationknown safe state ensure consistent validcausal ordering maintained despite phenomenonproblem events occurcoordinates virtual spacetime given encoded standard virtual timestamps clear way define eventhappensbefore results loss determinismregain assured determinism set rules defineddictating expected ordering simultaneous events givenstrictly increasing event counter processor incrementsnew event case simultaneous eventspriority based sending processor ididentical priority based event id encodedevent counter determinism regainedmajor caveat resulting ordering influenced biaschosen rulesetbias imparted ruleset difficult knowcertain resulting simulation behavior exemplarysimulated models behavior special case determinedsaid rulesets influence event ordering work extenddefinition virtual time include set tiebreaking valuesdevise mechanism unbiased arbitration simultaneousneil mcglohon christopher d carothersevents parallel discrete event simulator optimistic execution accomplished utilizing rollbacksafe tiebreakinguniform random number generator develop mechanismrensselaer optimistic simulation ross exhibit effects simulation performance model behaviorross optimistic execution utilizes fully deterministic pseudorandom number generators prngs different rnginitialization seed values yield different deterministic eventorderings presence simultaneous events allowingdeeper statistical analysis simulated modelswork propose argue new mechanismsfinding deterministic total ordering events parallel discreteevent simulation simultaneous events1 unbiased random total ordering incomparablesimultaneous events2 biased random total ordering incomparablesimultaneous events including events created zerodelayoffset3 unbiased random total ordering incomparablesimultaneous events including events created zerodelayoffsetproblem definitionwork specifically utilize rensselaer optimisticsimulation ross pdes engine 3 4 implementstime warp protocol 810 conjunction virtual time 11ross simulation entities agents represented logicalprocesses lps lps mapped processingelements pes exist typically pe physicalmpi process participating actual executionsimulationross capable run main modes synchronization simulation executed single processexecuted sequential mode maintaining determinism modetrivial challenge determinism comes additional pesadded simulation additional pes comes adventremote events destination different pesourcepropositions work based following assumptions definitionsassumption 1 parallel environment arrival order interprocessor messages guaranteed consistent executionssimulationnatural differences local clockspeedsmallest perturbation lead clock drift changeorder events different processorsarrive processor accounted leaddrastically different final results fortunately addressedtime warps virtual time approach parallel event processingassumption 2 event simulation encodedstandard virtual timestamp specifying simulation timeevent occursvirtual time receiving process abilitydetermine future event occur givenencoded virtual time possible receiving processdeduce partial ordering received eventprocess awareassumption 3 processing element pdespriority queue maintaining proper order arrived eventsprocesseddifferent lps pes scheduling eventstimes future assume eventsarrive exact order executedassumption 1 guaranteed triedpe manage queue maintaining proper orderevents processed certain existparallel simulator implements virtual timeoptimistically executed simulation events arrivelp current definition referred stragglerevents 6 address optimistic simulations rolledrolling simulation known safe stateundone events correctly ordered priority queue reprocessed accomplished orderedqueueassumption 4 lp create events virtual timepast relative definition virtual timesafe assumption entirety discrete event simulation relies basis maintaining causalorder causal orderingformally stateddefinition 1 11 event causes b bexists sequence events e 0 e 1 en bpair ei ei1 adjacent events ei ei1process virtual time ei ei1 b eventei sends message received event ei1virtual time simulations virtual spacetime coordinates event define happensbefore causal relationsevents instance events considered incomparable identical virtual timestampssimultaneous events event tiedefinition 2 events considered comparable consistent happensbefore relation inferredhappensbefore relation inferred consideredincomparabledefinition 3 event created zero virtualtime delay encoded timestamp creating lps definitiontimestamp causal event referred zerooffset eventassumption 5 lp rollbacksafe pseudorandom number generator stream solely dedicated generating uniform random values encode events createsachieve goal creating unbiased ordering simultaneous events pseudorandom number generator imperativestream completely independent streamsaccessed model deterministically rolled reasonsexplained section 32 criticalprng deterministically rolled previousstate events generated values cancelled rolledunbiased deterministic total ordering parallel simulations simultaneous eventsassumptions definitions posit following problemproblem statement 1 given optimistically conservativelyexecuted parallel discrete event simulation assumptions consisting partially ordered set virtualtime encodedevents e contain event ties mechanismensures unbiased total ordering e subsequentexecutions simulation deterministicevent simultaneityway phrase problem 1 given simulation eventsmechanism randomly establish partial orderingparallel simulation way deterministic identicaltotal ordered version sequential executionsimulation events partially ordered simulationcomparable partially ordered eventsconsidered totally orderedbriefly mentioned section 1 deterministic ordering simultaneous events achieved establishing rulesetenforced pe dictating event happensbeforeruleset precise render possible eventsimulation comparable event deterministictotal ordering established partial counterpartfigure 1 events b c d occur simultaneously simulation ruleset defined specify eventsordered occur simulation orderings c dspecifically consequence operatinglpordering biasruleset effect turn incomparable simultaneousevents comparable events occur simultaneously infinitesimally example rulesetfollows decreasing order importance cascadingbreak subsequent value tiesfigure 1 lpevent diagram events b c doccur respective lps simultaneously determining events c d particularordered final total ordering effect finalsimulation resultsruleset 2 ordering bias given 2way event tiespriority1 events lower virtual timestamp2 events win coin fliprulset given tied events b 50chance ordered ab 50 chance orderedba randomly generate values necessarycoin flip occur bias order eventssimulation 2way event tieseasily extended nway ties instead coinflipencode iid uniform random ur value eventcreated implement following rulesetruleset 3 ordering bias given nway event tiespriority1 events lower virtual timestamp2 events lower tiebreaking valueruleset 1 ordering explicit biaspriority1 events lower virtual timestamp2 events lower pe id3 events lower lp id4 events lower pe event idresult single final result likely options allow users explore alternate orderingsgreater consequence bias rulesetinstills simulation case timestamp tiepriority event came lower numbered processor means lps mapped lower numberedprocessors instance precedencetie simulation different numbers pesdifferent mapping likely generate different final resultsgiven possibility twoway event tie possiblerelinquish simulated model influences biasinstead relying fair coin flipgiven nway tie event having independentlygenerated uniform random value specific orderingevents constitutes single possibility occurring probability1n possible permutations tied events furthermore probability tied events ordered specificway respect 50 method equivalentdescribed proven 5 permutebysortingyielding following lemmalemma 1 5 given list length n n distinct iiduniform random values uniform random permutationassigning value item list sorting accordingvaluesprobability tiebreaker collision negligiblepossible generate uniform unbiased random permutationsorting based uniform randomly generated key followsruleset 3 extract unbiased random orderingnway event tieneil mcglohon christopher d carothersquestion random ordering eventssafe important thing ordering simultaneous eventsuphold event causality event caused happeneventlemma 2 zerooffset events simulationevents participating tie caused events said tieproof given contrapositive events participatingtie cause events tie zerooffset eventssuppose event participating tie caused eventtie events participating tie virtual timedifference zero definition causedevent scheduled zerooffset contrapositive proofzerooffset events allowed events event tiecaused events tieconsequence lemma zerooffsetevents simulation causal linkingevents participating tie events tieordinarily comparable comparable virtualtimestamps tie placeevents causally relatedincomparable processed order violatingcausality random permutation events constitutesvalid orderingproposition 1 providing addition standard virtualtimestamp secondary uniform random value comparing tiedevents based yield unbiased ordering eventsviolating causality given zerooffset eventsproof lemma 2 assures events event tiecausal relationship tieevents given standard virtual timestamp incomparable possible permutation events causallysafe lemma 1 implementation ruleset 3 allowevents comparable yield unbiased orderingeventsclarification define combination virtual timestamp secondary values determining event priorityvirtual time signature events created accordance proposition 1incomparable virtual timestamps comparablevirtual time signatureimportant note lemma 1 relies distinctvalues uniform random number generator natureprngs possible purposes workutilize sufficiently precise prngs large periodsassume probability generating nondistinct valuesnegligibleprobability considered high additional tiebreaking values generated encoded supplementaryindependent prng streams applying permutebysortingrecursively sublists containing prng value collisions effectively increases bit precision primary tiebreakingvalue making overall collision likely maintainingexpected lack biasdeterminism randomnessestablished given good choice rulesetcreate unbiased ordering events simulationgrant determinism ross simulator guaranteesassumption 5 allocating independent prng streamlp sole duty generating tiebreaker values encodedevent lp createsvaluable property prngs given specific seedsequence values generated deterministic sequentially conservative parallel executed simulation allowspseudorandomness sacrificing determinismexecution modes rollback previoussimulation stateexecuting parallel simulation optimisticallyrollbacks expected state prng stream indicatingposition value sequence rollednecessary different set numbers generated events simulation resumed result lpstate changes decisions based prng stream differexecution said rollbacks occur lossdeterminismcorollary 1 rollbacksafe tiebreaking uniform randomvalue execution proposition 1 yield deterministic unbiasedordering events violating causality given zerooffseteventsextra identifier enables comparison eventsincomparable implementedparts compares events instance pdesconfigured process events specific order caretaken recognize stragglermessage based virtualtime signatures correct longerguarantee determinism events irrevocably committedsimulation history agreement new extendeddefinition virtual timezerooffset event simultaneityproposition 1 makes certain assumptions natureproblem simulation environment operates specificallyallow zerooffset events exist simulationinconsequential realworld perspective imposed speed limits traversingspacetime necessarily guaranteed assumptionpossible simulated modelallow zerooffset events simulationfiner details established ensure deterministicvalid unbiased total ordering eventsmakes difficult act creating zerooffset eventsdefinition creates event ties result event generatesnew event zerooffset creating new event virtualtime occurs time event createdinstance order events committedsimulation history importantimportant note assumption 4 standardvirtual timestamps held truehappensbefore relations inferred extended definitionunbiased deterministic total ordering parallel simulations simultaneous eventsvirtual time furthermore virtual time signature eventstrictly greater time signature causal parentchallenge zerooffset eventsshown proposition 1 unbiased total orderingsimultaneous events uniform random valueacting tiebreaker works establishing unbiased hardrule events ordered simulationproposition 1 worked arbitrary orderingincomparable events result valid simulationtricky zerooffset events introduced parent event zerooffset child virtualtimestamps event definitely caused orderingevents ordered final simulationhistory arbitrarysolution proposition 1 create unbiased randomordering events absolute comparison iid random tiebreaking values utilized given event e generates childevent e zerooffset entirely possible uniformrandom tiebreaking value e event eextended definition virtual time implyevent e happened event e impossible evente directly caused e contradiction caused zerooffsetevent exactly happen timetravellingnegativeoffset event created establishes followinglemma 3 event created way classifyhappening events caused happenedbeforetiebreaker value enforcing final orderingevents execute complete fine risknondeterminism eventties tiebreaking mechanism pdes engine enter endless looprollbacks replays tries fruitlessly reconcile situationadhere deterministic tiebreaking orderconsider standard virtual timestampsevents incomparable comparable orderedchain causality definition 1 account zerooffsetevents stable simulation zerooffset eventsneed extend definition virtual time ensurevirtual time signature e e descendantsevent edefinition 4 event shares standard virtual timestamp lower tiebreaking value definedhappen infinitesimally converse impliesevent happens infinitesimallydefinition 5 zerooffset event sharing virtual timestampparent considered happen infinitesimallyparent converse implies parent happens infinitesimallychildrendemonstrate challenge utilizing tiebreaking mechanism established proposition 1 let assumeability ensure lemma 3 maintainedtiebreaking mechanismprevent possibility generating events virtual timesignatures happen infinitesimallyprocessedtable 1 events virtual times tiebreaking values example shown figure 2eventtime tiebreaker1 011 0151 0401 0301 020figure 2 diagram showing event processing queue stateprocessing previously given simultaneous eventst represents time simulation givenevent processed event createdaccording tiebreaker value happen bprocessed designated slashconsider sequential simulation ability rollbackevents new generated happens previously processed mechanism generatingvalid ordering sequential unlikely consistentlywork parallel executions example eventsb generate zerooffset child event b generates single zerooffset child events scheduledoccur point virtual time uniform random generated tiebreaking values determine order eventsdirectly caused virtual time tiebreakervalues events shown table 1sequential simulation start processing eventsb schedule new zerooffset eventsb process order according tiebreaker values issue b processingchild event created tiebreaker value lowerb simulation processing queue state exampleobserved figure 2 result irreparable errorsimulation sequential execution effective negativetimeevent received breaking lemma 3 optimistic executionenter infinite rollback scenario cause instabilitysequentialexactly challenge creating fair deterministicordering zerooffset events possible simulatorknow zerooffset event create zerooffset eventprocessed fair random orderingzerooffset tie events determinedneil mcglohon christopher d carothersfigure 3 lpevent diagram depicting events simultaneously occurring virtual timestamp depicted varying legal tiebreaking values encodedadditive scheme described section 42 final ordering simulation tied events b bbiased random causal orderingclear single pair randomly defined tiebreakingvalues insufficient ordering events given existencezerooffset events possible violate causalitypossible scheme determine orderingevents guarantee causality maintainedknow simulator utilizes standard virtualtime generate deterministic total ordering events tiesexist events unique time final orderingmonotonically increasing timestamppossible new events created encodedoffset additive time value longvalue negative guarantees causality maintained longvalue positive guarantees determinismgenerating zerooffset event insteadrandom tiebreaking value 01 generate randomvalue add random tiebreaking value parent eventnew tiebreaking value strictly greater parentassuring comparison orderparent lpevent diagram generated valuesprevious example table 1 adding consecutivelygenerated tiebreaking values creating child events shownfigure 3proposition 2 providing addition standard virtualtimestamp secondary value defined summing deterministic uniform random values generated causally related zerooffset eventscomparing tied events based yield randomizedbutbiased deterministic ordering events including zerooffset eventsviolating causalityproof given simultaneous events b c db c d b c d zerooffsetadditive tiebreaker values assume event d eventviolates lemma 3 conflict previously processed event btiebreaker value d strictly greater parent cway d created happens b chappened b c happened b orderingb d violate lemma 3 contradiction additive tiebreaking values safely allow zerooffset event tiebreakingviolating causality established lemma 3allow randomness introduced orderingevents introduces potentially unintended biascomparison tiebreaking values example given eventsscheduled time b event creates zero offsetchild creates zero offset child eventsscheduled virtual time tiebreaker valuedescendants additively generated probabilityevent comes event b 50 possible basedtiebreaking value happens b farlikely b happens expectationtiebreaker value lowertiebreaking value encoded eventslonger uniform random value 01 insteadsampled irwinhall distribution 12 expected valueirwinhall value proportional number uniformrandom values added generate zerooffsetdescendants recursively created likely happenindependent event way naturalimportant remember events scheduledmodel happen timemethod assuredly result deterministic orderingordering somewhat randomized based simulations input seed fairer way break tieszerooffset eventsunbiased random causal orderingtrying fair way order simultaneous events consider makes sense eventsinterject event zerooffset child relatedevents supposed occur simultaneously exceptioncausally dependent child happensinfintesimally afterward logic makes senseconsecutive final orderingpreviously section 42 observed wayevents child precede independent simultaneous eventoriginal event precededadditive tiebreaker value successfulguaranteed zerooffset child event value strictlygreater parent established unique timestampdescendants violateestablished order processed eventsdevise mechanism ensure subsequent zerooffset children parent event processedindependent events greater tiebreaking valuesaid parent consider ordering sequences numbersnumerous ways pick relation chooseconsidered ordering sets common waylexicographical orderingplace new words oxford dictionary english 21start comparing items setsmatch recursively compare subsequent itemssequences pair different determininglexicographicallybased final comparisonexample let consider sequences s 1 5 3 9 3s 2 5 3 4 6 lexicographically s 2 s 1unbiased deterministic total ordering parallel simulations simultaneous eventscomponentwise comparison 4 9 observematter long sequence s 2 longnumbers remain sequence s 2 s 1extend definition virtual time includesingle tiebreaking value sequence tiebreaking valuessequence comprised tiebreaking values historicalzerooffset parental events new event created newtiebreaking value generated appendedrunning list regularoffset event created sequencediscarded newly generated tiebreaking valuecurrent event added sole valuecomparing tiebreaking sequences different lengthsn components shorter match n components longer sequence priority given shorterhappen event owning shorter sequence caused referring english dictionaryanalogy singleletter word comes aardvarkaardvark comes apple 21result extension allows single event simulation comparablenew virtual time signature case virtual time signaturedefined sequence virtual timestamp followedregularoffset tiebreaker consecutively generated zerooffset tiebreakers benefits lexicographical ordering causality guaranteed zerooffset descendants timesignature strictly greater parent grandparenthappensbefore comparison tied eventsunrelated proposition 1 based comparisonuniformrandom valuesadditionally comparison tied eventsrelated based comparison twouniform randomvalues causally locked single relative orderingdescendant yieldingproposition 3 providing addition standard virtualtimestamp secondary sequence values defined deterministic uniform random values generated causally related zerooffsetevents comparing tied events lexicographically basedyield unbiased random deterministic ordering events includingzerooffset events violating causalityproof exact logic demonstrated proofproposition 2 applied guarantee determinismlexicographical ordering provides strict lessthangreaterthan relation events eventsexample observe c happen bd assuredly happens b happens infinitesimallyc determination ordering d b fallsfair comparison uniform random values generatedb c probability d happening b effectivelyrandomly determined fair coin flip unbiasedexperimental modelsevaluate proposed solution methods observecapability performance impact solutionsoverhead analyze performance impact standardpdes benchmarking model phold strongscaling studymodel event ties infrequent zerooffseteventsresults generated running pholdtell ordering events consistentrun run developed new pdes modelintentionally creates event ties possiblezerooffset events final lp state dependentordering events performance impactstrong scaling study new modelstress test simulation exceedingly highnumber event ties worstcase type scenario observeperformance impact strongscaling study basedvariation second modelexperiments presented performed rosspdes engine unbiased tiebreaking mechanism described section 43phold modelutilize phold benchmarking model included rossgenerally known tool analyzing performancepdes systems 2 6 generates lot events sent lps self lps based configurable probabilityparametersheer volume events model generate large scales model immune possibilityevent ties exceedingly likely new eventsscheduled point strictly future timeresult exponentially random number valued offseteventties modelgiven implemented solution problems discussedwork difficult know certain determinismobserved couple small scale experiments true determinismcoincidence especially case event ties relativelyinfrequentprocedure 1 eventties behavior lp p receipt event egivenr preset threshold desired remote eventsl preset length zerooffset event chainpmeanval meanpmeanval evalcreate new event nnval random integer 0100randomunif rdestrandom nonself lpdestselfende l th zerooffset eventsend n arrive dest time pnow1 regularoffsetsend n arrive dest time pnowzerooffsetendneil mcglohon christopher d carothersvalidate solution accomplishes core goal developed ross model specifically designed create scenarioexact event ordering absolutely critical deterministicfinal results model utilizes running sequence mathematical computations strict ordering noncommutativeoperations operating local lp state nondeterminismevident identically configured simulations slightlydifferent event ordering yield different final mathematicalresultmodel leverage noncommutative propertymean meansprocedure 2 eventtiesstress behavior lp p receiptevent egivenr preset threshold desired remote eventsh preset height zerooffset event treec preset number zerooffset children generated eventpmeanval meanpmeanval eval0 ccreate new event nnval random integer 0100randomunif rdestrandom nonself lpdestselfendndescendantsumsend n arrive dest time pnowzerooffsetende h th level tree edescendantsum 0ndescendantsum 0send n arrive dest time pnow1 regularoffsetendmeanmeana b c meanmeana c butilize property event received lpstate updated mean current stateencoded state event events received lpsimultaneous point virtual time deterministic rulesimultaneous event ordering implementedassumption 1 property simulation determinismguaranteedcore behavior model described procedure 1new event received recursive mean value lp stateupdated new event new random integer createdevent destined based probability challengenumber remote simulation events controlledevent scheduled determinedzerooffset chain event configured number l 1samevirtualtime events causally preceded sendnew event offset breaking zerooffsetchain event l th event zerooffset chaincreate zerooffset eventeventtiesstress modelsection 52 showcased example model generatelarge number tied events zerooffset timingsharder showcase capabilitiestiebreaking mechanismprocedure 1 creates simultaneous chains zerooffsetevents instead generate simultaneous trees zerooffsetevents shown procedure 2 difficulty modelscaled adjusting height degree generatedzerooffset tree lexicographical ordering operatingtiebreaking sequences particularly useful caseable quickly determine event happensregardless event zerooffset offspring sibling cousinnephewniece unrelated furthermoreshown section 43 probability eventsordered specific way simulation 50 zerooffset descendant child grandchild casesingle possible relative orderingshown procedure 2 mechanism sureevent zerooffset tree creates new zerooffsettree exponential growth eventssimulation proceeds making progressively difficultcompleteresultssimulations performed work executed4 nodes aimos supercomputer rensselaer polytechnic institutes center computational innovations 1node contains ibm power 9 processors 20 cores315ghz clocks 512gib ram simplicity scalingexperiments utilized maximum 32 processors nodeinternode communication facilitated infiniband edr fattree communication networkbinaries compiled ibms xlcr compiler spectrum mpiphold strongscaling wanted benchmark performanceextension ross direct comparison old versionross deterministic tiebreaker phold modelcommonly benchmark ross pdes systemsincluded simulators codebase 2 7 simulationsconfigured 2 million lps target 10remote events generating total 13 billion net eventsobserve figure 4 deterministic tiebreakerversion runs bit slower lower numbers ranks catchesranks added overhead implementingtiebreaker significantly impact parallel performance especially larger numbers ranksevent ties benefit obvious based runtimeeventties strongscaling eventties modelcreate situation event ties possible eventtimestamps zerooffset integer incremented 65536 lpssimulated creating single regularoffset eventcauses single zerooffset event total created 39 millionunbiased deterministic total ordering parallel simulations simultaneous eventsphold strong scaling5000eventties strong scalingw deterministic tiebreakerwo deterministic tiebreakersimulation runtime ssimulation runtime s60004000300020001000820810800790780770000w deterministic tiebreakerwo deterministic tiebreakernumber ranks128figure 4 phold strong scaling studydeterministic tiebreaking mechanismevents event created tied eventsimulationwanted able plot capabilitiesdeterministic tiebreaker version ross contrastold version deterministic tiebreaker version excelsfaced zerooffset events old versionappearance stalling struggles progressreason behavior original ross instigatesrollback rolls events timestamptarget event way eventstimestamp comparable means single straggler eventarrives likely progressregular offset event rolledlimitation way ableross versions single plot modelcreate zerooffset chains length instead increasetarget remote events 50figure 5 result behavior old rossversion appears pointranks added probability rollback increases eventually takes considerable amounts time simulationcompleteeventtiesstress strongscaling model created zerooffset event trees instead chains standard eventtiesmodel creates zerooffset siblingsthat tiebreaker sequence fully utilized establish deterministicorderingmodel tested 131072 lps generating 3aryzerooffset tree depth 5 integer timestep simulationcreated 39 billion total events extreme degreeties events target remote percentage 10small increase runtime k 2 ranks runparticular simulation model configuration benefitadditional processing power able outweigh costrollbacks observed sequential execution00 120204 81606 32number ranks086412810figure 5 eventties strong scaling studydeterministic tiebreaking mechanism note yaxissplit account data pointcase determinismsimulations work utilizing deterministic tiebreakingfeature verified exhibit expected determinism contrast simulations executed utilizing tiebreaking mechanism consistently generate reproducible resultlooking results phold scaling argueoverhead performance impact great warrantutilizing feature phold lp state changesimulation generation future events dependcontents events received event tiesoccasionally occur simulated model orderingaffect net events final simulationsaid models sensitive simultaneousevent ordering table 2 shows extracted results runseventties scaling results featured figure 5 observe small differences final results lp statearbitration simultaneous events lack determinismdeterministic tiebreaker functionality enableddeterminism restored parallel executions identicalsequential counterpart difference sequentialruns tiebreaker expected rules dictating order tiebreaker simulationsaffect order events sequential versiontable 2 subset final results sequential k 1 optimistic k 32 k 128 runs eventties modeldeterministic tiebreaker tbsimulationwo tb k 1wo tb k 32wo tb k 128w tb k 1w tb k 32w tb k 128net events391905283919052839190528391905283919052839190528lp1 final value350814344111344010347264347264347264neil mcglohon christopher d carotherseventtiesstress strong scalingsimulation runtime s3000w deterministic tiebreaker2500200015001000500number ranks128figure 6 eventtiesstress strong scaling study deterministic tiebreaking mechanism old version rosstolerate model noticeable progress execution mode sequentialeventties model model generatedevents depend lp state time processing eventordering explicitly affects final result example showntable 2 appear executions tiebreakerclose product simplicitymodel indicative expectcomplicated models table 2 shows simply lookingnumber net events sufficient identifyingdeterminism simulated modelinstead couple remote destination decision procedure 1 dependent current lp state value drasticallydifferent results observed makes sense lp stateplay role events created createdplace model particularly sensitiveordering simultaneous events important mindgiven standard virtual time simulation level performance observed model simultaneous events simplyborrowed determinism offered collateralgoal parallel discrete event simulation recreatesemantically identical sequential simulation distributeddifferent processing elements determinism parallel execution assured definition failedobjectiverelated worktopic event simultaneity ordering parallel simulationsdiscussed contexts span decades 1319 22 14 topic distributed logical physical clockscausal ordering conditions happensbefore relations discussed notes included theory makes requirementordering incomparable simultaneous eventsclocks discussed base perception time based perceived happensbefore relations eventsvirtual time 11 takes slightly different approach inferringhappensbefore relations encoded timestamps givingsimulated model power define events happen relation20 authors extend ross definitionvirtual time encode lower order bits break event tiespaper inspired work performed 22author makes arguments given simulation n simultaneous events correct final result meann possible event orderings mechanism effectively explore possible orderings correct final resultachievable work provide method allowsrandom sampling possible event orderingsyear authors 13 proposed event orderingmechanism simultaneous events employed extension basic timestamp encoding event prioritymechanism provided identical results sequential parallel executed simulation similar practice definitionbiased random causal orderingauthors 19 establish methods breaking ties basedlogical clock interpretation event causality user definedpriorities briefly argue different permutationsincomparable events considered inherently affect outcomes future events elaboratesolution effectively explore space similarly 1517 authors note importance discovering potentialoutcomes simultaneous event orderings propose pdesbranching mechanism tool facilitatesconclusionsummary proposed solutions problemmaintaining deterministic ordering events parallel conservative optimistically executed discrete event simulation givenpossibility nway simultaneous eventszerooffset events solution leverages deterministic pseudorandom number generator encode values use breakingnway event ties specific executionconsistent ordering ordering unbiased varied changinginitial seed simulations random number generatorsallows statistical analysis execution resultsevaluated performance impact proposed solutionobserved marginal impact standard pdes benchmarkingmodel near worstcase stresstest benchmark modelsperformance simulation tiebreaking functionality weakened able effective progressfurthermore simulation tiebreaking featureguarantee deterministically produce optimistic execution semantically identical sequential counterpartdevelopers modelers concerned program wrote generates different results repeated executionsmistake race conditionaccounted believe determinism parallel discrete event simulation important tenetcast aside aim faster performancenondeterminism definition unexpected behaviorunbiased deterministic total ordering parallel simulations simultaneous eventsreferences1 2020 artificial intelligence multiprocessing optimized aimos centercomputational innovations httpsccirpieduaimos2 peter d barnes christopher d carothers david r jefferson justin m lapre2013 warp speed executing time warp 1966080 cores sigsimpads 2013proceedings 2013 acm sigsim principles advanced discrete simulation327336 httpsdoiorg101145248609224861343 christopher d carothers david bauer shawn pearce 2000 ross highperformance lowmemory modular time warp proceedingsworkshop parallel distributed simulation pads httpsdoiorg101109pads20008471444 christopher d carothers david bauer shawn pearce 2002 ross highperformance lowmemory modular time warp j parallel distribcomput 62 2002 issue 11 httpsdoiorg101016s07437315020000475 thomas h cormen charles e leiserson ronald l rivest 2001 introductionalgorithms second edition vol 7 issue 9 httpsdoiorg10230725836676 richard m fujimoto 1990 parallel discrete event simulation commun acm33 1 1990 3053 issue 10 httpsdoiorg10114584537845457 richard m fujimoto 1990 performance time warp synthetic workloadsproceedings scs multiconference distributed simulations 1990 vol 2223288 david jefferson brian beckman fred wieland leo blume mike di loreto1987 time warp operating acm sigops operating systems review 211987 issue 5 httpsdoiorg10114537499375089 david jefferson brian beckman fred wieland leo blume mike di loreto philhontalas pierre laroche kathy sturdevant jack tupman van warren johnwedel herb younger steve bellenot 1987 distributed simulationtime warp operating proceedings 11th acm symposiumoperating systems principles sosp 1987 httpsdoiorg101145414573750810 david jefferson henry sowizral 1985 fast concurrent simulationtime warp mechanism simulation series 15 issue 211 david r jefferson 1985 virtual time acm transactions programminglanguages systems toplas 7 1985 issue 3 httpsdoiorg1011453916398812 norman l johnson samuel kotz narayanaswamy balakrishnan 1995 continuous univariate distributions volume 2 vol 289 john wiley sons13 ki hyung kim yeong rak seong tag gon kim kyu ho park 1997 orderingsimultaneous events distributed devs simulation simulation practicetheory 5 3 1997 253268 issue 3 httpsdoiorg101016s092848699600009214 leslie lamport 1978 time clocks ordering events distributedcommun acm 21 1978 issue 7 httpsdoiorg10114535954535956315 patrick peschlow peter martini 2006 efficient branchingmechanism simultaneous events distributed simulation proceedings workshop principles advanced distributed simulation pads 2006 133httpsdoiorg101109pads20063616 patrick peschlow peter martini 2007 discreteevent simulation toolanalysis simultaneous events 200717 patrick peschlow peter martini 2007 efficient analysis simultaneousevents distributed simulation proceedings ieee international symposiumdistributed simulation realtime applications dsrt httpsdoiorg101109dsrt20072418 hassan rajaei 1993 design issues parallel simulation languages ieee designtest computers 10 1993 5263 issue 4 httpsdoiorg1011095424596319 robert ronngren michael liljenstam 1999 event ordering paralleldiscrete event simulation proceedings workshop parallel distributedsimulation pads 1999 3845 httpsdoiorg101109pads199976615920 markus schordan tomas oppelstrup michael kirkedal thomsen robertglck 2020 reversible languages incremental state saving optimisticparallel discrete event simulation international conference reversible computation springer cham 18720721 angus stevenson 2010 oxford dictionary english oxford university pressusa22 frederick wieland 1995 threshold event simultaneity proceedings 11thworkshop parallel distributed simulation 5659 httpsdoiorg101109pads1997594586