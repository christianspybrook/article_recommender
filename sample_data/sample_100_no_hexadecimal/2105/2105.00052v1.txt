Long Runs Imply Big Separators in Vector
Addition Systems
Wojciech Czerwiński

!

University of Warsaw

Adam Jędrych

!

University of Warsaw

arXiv:2105.00052v1 [cs.FL] 30 Apr 2021

Abstract
Despite a very recent progress which settled the complexity of the reachability problem for Vector
Addition Systems with States (VASSes) to be Ackermann-complete we still lack of lot of understanding
for that problem. A striking example is the reachability problem for three-dimensional VASSes
(3-VASSes): it is only known to be PSpace-hard and not known to be elementary. One possible
approach which turned out to be successful for many VASS subclasses is to prove that to check
reachability it suffices to inspect only runs of some bounded length. This approach however has
its limitations, it is usually hard to design an algorithm substantially faster than the possible size
of finite reachability sets in that VASS subclass. In 2010 Leroux has proven that non-reachability
between two configurations implies separability of the source from target by some semilinear set,
which is an inductive invariant. There can be a reasonable hope that it suffices to look for separators
of bounded size, which would deliver an efficient algorithm for VASS reachability. In the paper
we show that in VASSes fulfilling certain conditions existence of only long runs between some
configurations implies existence of only big separators between some other configurations (and in a
slightly modified VASS). Additionally we prove that a few known examples of hard VASSes fulfil
the mentioned conditions. Therefore improving the complexity of the reachability problem (for any
subclass) using the separators approach can meet serious obstacles.
2012 ACM Subject Classification Theory of computation → Parallel computing models
Keywords and phrases Vector Addition Systems, reachability problem, separators, semilinear sets
Digital Object Identifier 10.4230/LIPIcs.CVIT.2016.23
Funding Wojciech Czerwiński: Supported by the ERC grant INFSYS, agreement no. 950398.

1

Introduction

The complexity of the reachability problem for Vector Addition Systems (VASes) was a
challenging and natural problem for a few decades of research. First result about its
complexity was ExpSpace-hardness by Lipton in 1976 [15]. Decidability was shown by Mayr
in 1981 [16]. Later the construction of Mayr was further simplified and presented in a bit
different light by Kosaraju [9] and Lambert [10] and currently is known under the name
KLM decomposition after the three main inventors. First complexity upper bound was
obtained by Leroux and Schmitz as recent as in 2016 [13], where the reachability problem
was shown to be solvable in cubic-Ackermann time. A few years later the same authors have
shown that the problem can be solved in Ackermann time and actually in primitive recursive
time, when the dimension is fixed [14]. In the same time a lower bound of Tower-hardness
was established for the reachability problem [4]. This year, very recently, two independent
papers have shown Ackermann-hardness of the reachability problem [12, 6] thus settling the
complexity of the problem to be Ackermann-complete.
However, despite this recent huge progress we still lack of lot of understanding about the
reachability problem in VASSes. The most striking example is the problem for dimension
three. The best known lower bound for the reachability problem for 3-VASSes is PSpace© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:1–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

hardness inherited from the hardness result for 2-VASSes [1], while the best known upper
bound is much bigger then Tower. Concretely speaking the problem can be solved in time
F7 [14], where Fα is the hierarchy of fast-growing complexity classes, see [18] (recall that
Tower = F3 ). Similarly for other low dimensional VASSes the situation is unclear. Currently
the smallest dimension d for which an ExpSpace-hardness was published for d-VASSes is
d = 14 [4]. Therefore for any d ∈ [3, 13] the problem can be in PSpace and is not known to be
elementary. For some of those dimensions one can expect to get ExpSpace-hardness, but we
conjecture that for 3-VASSes and 4-VASSes the reachability problem actually is elementary
and the challenge is to find this algorithm. This complexity gap is just one witness of our lack
of understanding of the structure of VASSes. One can hope that in the future we will be able
to design efficient algorithms for the reachability problem even for VASSes in high dimensions
under the condition that they belong to some subclass, for example they avoid some hard
patterns. This can be quite important from a practical point of view. Understanding for
which classes efficient (say PSpace) algorithms are possible may be thus another future goal.
Therefore we think that the quest for better understanding the reachability problem is still
valid, even though the complexity of the reachability problem for general VASSes is settled.
A common and very often successful approach to the reachability problems is proving a
short run property, namely showing that in order to decide reachability it suffices to inspect
only runs of some bounded length. This technique was exploited a lot in the area of VASSes.
Rackoff proved his ExpSpace upper bound on the complexity of coverability problem [17]
using this approach: he has shown that if there exist a covering run then there exist also
a covering run of at most doubly-exponential length. Recently there was a lot of research
about low dimensional VASSes and the technique of bounded run length was also used
there. In [1] authors established complexity of the reachability problem for 2-VASSes to
PSpace-completeness by proving that in order to decide reachability it suffices to inspect
runs of at most exponential length. Similarly in the next paper in this line of research [7] it
was shown that in 2-VASSes with unary transition representation it suffices to consider runs
of polynomial length, which proves NL-completeness of the reachability problem.
This approach however meets a subtle obstacle when one tries to prove some upper bound
on the complexity of the reachability problem in say d-VASSes. In order to show a bounded
length property it is natural to try to unpump long runs in some way. Unpumping however
can be very tricky when the run is close to some of the axes, as only a small modification of
the run may cause some counters to become negative. A common approach to that problem
is to modify a run when all its counters are high and therefore local run modifications cannot
cause any problem. Such an approach is used for example in 2-VASSes [1] and in the KLM
decomposition [9, 10, 16]. However not all the runs may have a configuration with all counter
values high. Therefore it is very convenient to have a cycle, which increases all the counters
simultaneously. Observe that existence of such a cycle implies that the set of reachable
configurations is infinite. Thus using this approach is hard in the case when the reachability
set is finite. For finite set in turn it is hard to design algorithm substantially faster than
the size of the reachability set. It is well known that in d-VASSes finite reachability sets
can be as large as Fd−1 (n), where n is the VASS size and Fα is the hierarchy of very fast
growing functions, see [18]. Therefore designing an algorithm breaking Fd−1 (n) time for the
reachability problem in d-VASSes (if such exist) may need some other approach. Breaking
the barrier of the size of finite reachability set is possible in general, but probably usually
very challenging. To the best of our knowledge the only nontrivial algorithm breaking it
is the one in [7] doing a sophisticated analysis of possible behaviours of runs in 2-VASSes.
This motivates a search for other techniques, which may be more suitable for designing fast
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:2–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

algorithms.
Leroux in his work [11] provided an algorithm for the reachability problem, which follows
a completely different direction. He has shown that if there is no run from a configuration
s ∈ Nd to a configuration t ∈ Nd in a VAS V then there exist a semilinear set S, called a
separator, which (1) contains s, (2) does not contain t and (3) is an inductive invariant,
namely if v ∈ S then also v + t ∈ S for any transition t of V such that v + t ∈ Nd . Notice
that existence of a separator clearly implies non-reachability between s and t, so by Leroux's
work non-reachability and existence of separator are equivalent. Then the following simple
algorithm decides whether t is reachable from s: run two semi-procedures, one looks for
possible runs between s and t, longer and longer, another one looks for possible separators
between s and t, bigger and bigger. Clearly either there exist a run or there exist a separator,
so at some point algorithm will find it and terminate. From this perspective one can view
runs and separators as a dual objects. If bounding the length of a run is nontrivial, maybe
bounding the size of a separator can be another promising approach. Notice that providing
for example an Fd (n) upper bound on the size of separators would provide an algorithm
solving reachability problem and working in time around Fd (n).
Our contribution Our main contribution are two theorems stating that in VASSes fulfilling
certain conditions if there are only long runs between some its two configurations then
in a small modification of this VASS there are only big separators for some other two
configurations. We designed Theorem 4 to have relatively simple statement, but also to be
sufficiently strong for our applications. Theorem 9 needs more sophisticated notions and
more advanced tools to be proven, but it has potentially a broader spectrum of applications.
Additionally we have shown that two nontrivial constructions of hard VASSes, namely
the 4-VASS from [5] and VASS used in the Tower-hardness construction from [4] fulfil the
conditions proposed by us in Theorem 4. This indicates that for each VASS subclass F
(for example 3-VASSes) either (1) in order to prove better upper complexity bound for the
reachability problem in F one should focus more on proving short run property than small
separator property or (2) there is a possibility of finding a VASS in F with very long shortest
runs and much smaller separators. However, in the latter case the mentioned VASS has to
be constructed by the use of rather a different techniques than currently known, as it needs
to violate conditions of Theorems 4 and 9.
We have not considered VASSes occurring in the most recent papers proving the Ackermann-hardness [12, 6], but it seems to us that these techniques are promising at least with
respect to VASSes occurring in [6].
Organisation of the paper In Section 2 we introduce necessary notions and recall standard
facts. Then in Section 3 we state and prove our two main results, Theorems 4 and 9. In
Section 4 we provide two applications of Theorem 4, in Section 4.1 to the 4-VASS described
in [5] and in Section 4.2 to VASSes occurring in the paper [4] proving the Tower-hardness of
the reachability problem.

2

Preliminaries

Basic notions We denote by N the set of nonnegative integers and by N+ the set of positive
integers. For a, b ∈ N by [a, b] we denote the set {a, a + 1, . . . , b − 1, b}. For a set S we
write |S| to denote its size, i.e. the number of its elements. For two sets A, B we define
A + B = {a + b | a ∈ A, b ∈ A} and AB = {a * b | a ∈ A, b ∈ B}. In that context we often
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:3–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

simplify the notation and write x instead of the singleton set {x}, for example x + Ny denotes
the set {x} + N{y}. The description size of an irreducible fraction pq is max(|p|, |q|), for
r ∈ Q its description size is the description size of its irreducible form.
For a d-dimensional vector x = (x1 , . . . , xd ) ∈ Rd and index i ∈ [1, d] we write x[i]
for xi . For S ⊆ [1, d] we write projS (x) to denote the |S|-dimensional vector obtained
from x by removing all the coordinates outside S. The norm of a vector x ∈ Nd is
norm(x) = maxi∈[1,d] |x[i]|. For i ∈ [1, d] the elementary vector ei is the unique vector such
that ei [j] = 0 for j ̸= i and ei [i] = 1. By 0d ∈ Nd we denote the d-dimensional vector with
all the coordinates being zero.
Vector Addition Systems A d-dimensional Vector Addition System with States (shortly
d-VASS or just a VASS) consists of finite set of states Q and finite set of transitions
T ⊆ Q × Zd × Q. Configuration of a d-VASS V = (Q, T ) is a pair (q, v) ∈ Q × Nd , we often
write q(v) instead of (q, v). For a configuration c = q(v) we write state(c) = q. For a set of
vectors S ⊆ Nd and state q ∈ Q we write q(S) = {q(v) | v ∈ S}. Transition t = (p, u, q) can be
t
fired in configuration (r, v) ∈ Q×Nd if p = r and u+v ∈ Nd . Then we write p(v) −→ q(u+v).
The triple (p(u), t, q(u + v)) is called an anchored transition. A run is a sequence of anchored
transitions ρ = (c1 , t1 , c2 ), . . . , (cn , tn , cn+1 ). Such a run ρ is then a run from configuration
c1 to configuration cn+1 and traverses through configurations ci for i ∈ [2, n]. We also say
that ρ is from state(c1 ) to state(cn+1 ). If there is a run from configuration c to configuration
c′ we also say that c′ is reachable from c or c reaches c′ and write c −→ c′ . Otherwise we
write c −→
̸
c′ . The configuration c is the source of ρ while configuration c′ is the target
of ρ. For a configuration c ∈ Q × Nd we denote postV (c) = {c′ | c −→ c′ } the set of all
the configurations reachable from c and preV (c) = {c′ | c′ −→ c} the set of all the the
configurations which reach c. The reachability problem for VASSes given a VASS V and
two its configurations s and t asks whether s reaches t in V . For a VASS V by its size we
denote the total number of bits needed to represent its states and transitions. A VASS is
said to be binary if numbers in its transitions are encoded in binary. Effect of a transition
(c, t, c′ ) ∈ Q × Zd × Q is the vector t ∈ Nd . We extend this notion naturally to anchored
transitions and runs, effect of the run ρ = (c1 , t1 , c2 ), . . . , (cn , tn , cn+1 ) is equal to t1 + . . . + tn .
Vector Addition Systems (VASes) are VASSes with just one state, which therefore can be
ignored. It is well known and simple to show that the reachability problems for VASes and
for VASSes are polynomially interreducible. In this work we focus wlog. on the reachability
problem for VASSes.
Semilinear sets For any vectors b, v1 , . . . , vk ∈ Nd the set L = b + Nv1 + . . . + Nvk is called
a linear set. Then vector b is the base of L and vectors p1 , . . . , pk are periods of L. Set
of vectors is semilinear if it is a finite union of linear sets. Set of VASS configurations
S ⊆ Q × Nd is semilinear if it is a finite union of sets of the form qi (Si ) ⊆ Q × Nd , where Si
are semilinear as sets of vectors. The size of a representation of a linear set is the sum of
S
norms of its base and periods. The size of a representation of a semilinear set i Li is the
sum of sizes of representations of the sets Li . The size of a semilinear set is the size of its
smallest representation.
For a d-VASS V = (Q, T ) and two its configurations s, t ∈ Q × Nd a set S ⊆ Q × Nd
of configurations is a separator for (V, s, t) if it fulfils the following conditions: 1) s ∈ S,
t
2) t ̸∈ S, 3) S is invariant under transitions of V , namely for any c ∈ S such that c −→ c′
′
for some t ∈ T we also have c ∈ S. In our work we usually do not exploit by condition 3)
by itself, but use the facts which are implied by all the conditions 1), 2) and 3) together:
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:4–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

post(s) ⊆ S and pre(t) ∩ S = ∅.
Well quasi-order on runs We say that an order (X, ⪯) is a well-quasi order (wqo) if in
every infinite sequence x1 , x2 , . . . of elements of X there is a domination, i.e. there exist
i < j such that xi ⪯ xj .
Fix a d-VASS V = (Q, T ). We define here a very useful order on runs, which turns
out to be a wqo (a weaker version was originally introduced in [8]). For two configurations
p(u), q(v) ∈ Q × Nd we write p(u) ⪯ q(v) if p = q and u[i] ≤ v[i] for each i ∈ [1, d]. For
two anchored transitions in (c1 , t, c2 ), (c′1 , t′ , c′2 ) we write (c1 , t, c2 ) ⪯ (c′1 , t′ , c′2 ) if t = t′ ,
c1 ⪯ c′1 and c2 ⪯ c′2 (notice that the last condition is actually implied by the previous
two). For two runs ρ = m1 . . . mk and ρ′ = m′1 . . . m′l , where all mi for i ∈ [1, k] and m′i
for i ∈ [1, l] are anchored transitions we write ρ ⊴ ρ′ if there exists a sequence of indices
i1 < i2 < . . . < ik−1 < ik = l such that for each j ∈ [1, k] we have mj ⪯ m′ij . Notice there
that setting ik = l implies that trg(ρ) ⪯ trg(ρ′ ). All the subsequent considerations can be
analogously applied in the case when i1 = 1, but ik does not necessarily equal k, which
enforces that src(ρ) ⪯ src(ρ′ ). The following claim is a folklore, for a proof see Proposition
19 in [3].
▷ Claim 1. Order ⊴ is a wqo on runs.
The order ⊴ has a nice property that runs bigger than a fixed one are additive in a
certain sense. The following claim is also a folklore, for a proof see Lemma 23 in [2] (arXiv
version of [3]).
▷ Claim 2. Let ρ, ρ1 and ρ2 be runs of VASS V such that ρ ⊴ ρ1 , ρ2 , trg(ρ1 ) = trg(ρ) + δ1
and trg(ρ2 ) = trg(ρ) + δ2 for some δ1 , δ2 ∈ Nd . Then there exist a run ρ′ such that ρ ⊴ ρ′
and trg(ρ′ ) = trg(ρ) + δ1 + δ2 .
The following corollary can be easily shown by induction on n.
▶ Corollary 3. Let ρ ⊴ ρ′ be runs of VASS V such that trg(ρ′ ) = trg(ρ) + δ for some δ ∈ Nd .
Then for any n ∈ N there exists a run ρn of V such that trg(ρn ) = trg(ρ) + nδ.
The above notions will be useful in the proof of Theorem 9.

3

Separators

In this section we state and prove two main results. The first one is simpler both in the
formulation and in the proof and sufficient to show applications in Section 4. The aim of the
second one is to show a potentially more general scope of the applications and to formulate
assumptions in a bit more canonical way.

3.1

Applied theorem

▶ Theorem 4. Let V be a d-VASS, s, t ∈ Q × Nd be two its configurations, q ∈ Q be a state
and a line α = a + N∆ for vectors a, ∆ ∈ Nd be such that
(1) ∆ = (∆[1], ∆[2], 0d−2 ) ∈ Nd ,
(2) there is no run from s to t,
(3) q(α) ⊆ postV (s),
(4) q(α + N+ e2 ) ⊆ preV (t).
Then each separator for (V, s, t) contains a period r * ∆ for some r ∈ Q.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:5–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

Proof. Consider an arbitrary separator S for (V, s, t). Let Sq = {v | q(v) ∈ S, v ∈ Nd } be
S
its part devoted to the state q and let Sq = i∈I Li , where Li are linear sets. As the line α
contains infinitely many points and α ⊆ Sq then some of the linear sets Li has to contain
infinitely many points of α. Denote this Li by L, let L = b + Np1 + . . . + Npk . We know that
for arbitrarily big n we have a + n∆ = b + n1 p1 + . . . + nk pk for some ni ∈ N. Wlog. we can
assume that ni > 0, we just do not write the periods pi with coefficient ni = 0. Notice first
that for each coordinate j ∈ [3, d] we have (a + n∆)[j] ≤ norm(a). Therefore for pi such that
pi [j] > 0 for some j ∈ [3, d] we have ni ≤ norm(a). Let P0 be the set of periods pi such that
pi [j] = 0 for all j ∈ [3, d] and P̸=0 be the set of the other periods pi . We thus have
(a − b −

X

ni pi ) + n∆ =

pi ∈P̸=0

X

ni pi ,

pi ∈P0

P
where the sum v = (a − b − pi ∈P̸=0 ni pi ) has a norm bounded by B = norm(a) + norm(b) +
k * norm(a) * maxpi ∈P̸=0 norm(pi ), which is independent of n. If we restrict the equation to
the first two coordinates of the considered vectors we have
X
(v[1], v[2]) + n(∆[1], ∆[2]) =
ni (pi [1], pi [2]).
(1)
pi ∈P0

We aim at showing that one of pi is equal to r * ∆ for some r ∈ Q. Recall that for each
j ∈ [3, d] we have ∆[j] = pi [j] = 0, so it is enough to show that (pi [1], pi [2]) = r * (∆[1], ∆[2]).
We first show the following claim.
▷ Claim 5. For each period p ∈ P0 we have ∆[1] * p[2] ≤ ∆[2] * p[1].
Proof. The intuitive meaning of ∆[1] * p[2] ≤ ∆[2] * p[1] is that

∆[1]
∆[2]

≤

p[1]
p[2] ,

however we cannot

p[1]
p[2]

write the fraction
as it might happen that p[2] = 0. Assume towards a contradiction
that for some p ∈ P0 we have ∆[1] * p[2] > ∆[2] * p[1]. Let δ = ∆[1] * p[2] − ∆[2] * p[1] > 0.
Recall that b + n∆ ∈ L for some n ∈ N, therefore also b + n∆ + ∆[1] * p ∈ L as p ∈ P0 is a
period of L. Then however
∆[1] * p = ∆[1] * (p[1], p[2], 0d−2 ) = (∆[1] * p[1], ∆[1] * p[2], 0d−2 )
= (∆[1] * p[1], ∆[2] * p[1] + δ, 0d−2 ) = p[1] * ∆ + δ * e2 ∈ N∆ + N+ e2 .
Therefore b + n∆ + ∆[1] * p ∈ b + N∆ + N+ e2 and it means that q(b + n∆ + ∆[1] * p) ∈ preV (t).
However we know that q(b + n∆ + ∆[1] * p) ∈ q(Sq ) ⊆ S and therefore separator S nonempty
intersects the set preV (t). This is a contradiction with the definition of separator.
◀
In order to show that p = r * ∆ for some p ∈ P0 it is sufficient to show that ∆[1] * p[2] =
∆[2] * p[1]. Assume towards a contradiction that for all p ∈ P0 we have ∆[1] * p[2] ̸= ∆[2] * p[1].
By Claim 5 we know that actually for all p ∈ P0 we have that ∆[1] * p[2] < ∆[2] * p[1]. Thus
p[2]
p[1] > 0 and we can equivalently write that for all p ∈ P0 we have that ∆[2]
∆[1] > p[1] . Let F be
the maximal value of

p[2]
p[1]

for p ∈ P0 , clearly

∆[2]
∆[1]

> F , so

∆[2] > F * ∆[1].
By (1) we know that
(v + n∆)[2]
≤ F,
(v + n∆)[1]
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:6–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

(2)

as v + n∆ is a positive linear combination of vectors p ∈ P0 and for each p ∈ P0 we have
p[2]
p[1] ≤ F . Therefore it holds
v[2] + n∆[2] ≤ F (v[1] + n∆[1])
and equivalently
n(∆[2] − F ∆[1]) ≤ F v[1] − v[2].
By (2) we have that ∆[2] − F ∆[1] > 0 therefore
n≤

F v[1] − v[2]
.
∆[2] − F ∆[1]

This is in contradiction with the assumption that n can be arbitrarily big and finishes the
proof.
◀
▶ Remark 6. In Theorem 4 instead of separator for (V, s, t) one can consider a separator
for (V ′ , s, t), where V ′ is obtained from V by adding a loop in state q with the effect of
decreasing the second counter. Indeed, it is easy to observe that all the points 1-4 in the
theorem statement remain true after substitution of V by V ′ . Such a version of Theorem 4
is a bit more convenient for some of the applications.

3.2

Generalised theorem

Before we start introducing the notions needed for Theorem 9 we motivate the need of a
generalisation of Theorem 4. Formulation of Theorem 4 is rather simple and it is sufficient
for our applications, but it may seem a bit arbitrary. Sometimes in a VASS we have a
ratio between some two counters x and y being a fraction with big description size. Then
Theorem 4 is applicable and intuitively speaking it aims at proving that separators are big
because of big description size of the fraction xy . We can however very easily imagine that
in some other, but related VASS a value of x is kept on some two counters as 2x1 + 3x2
and value of y is kept as a sum of three counters y1 + y2 + y3 . In that case we would like to
1 +3x2
reason about the description size of the fraction y2x
and from it derive lower bounds
1 +y2 +y3
on the size of separators. This motivates introduction of the linear functions defined below.
When we deal with more than two counters we cannot easily speak about lines, which were
natural in Theorem 4. This is the reason why we are forced to use a more abstract language
in order to be prepared for the above mentioned simple applications.
Greatest common divisors We state here a fact about greatest common divisors, which is
helpful in the sequel. By gcd(a1 , . . . , ak ) we denote the greatest common divisor of all the
numbers a1 , . . . , ak .
▷ Claim 7. For all natural numbers a1 , . . . , ak ≤ M and for each S ≥ M 2 − M which
is divisible by gcd(a1 , . . . , ak ) there exist nonnegative coefficients b1 , . . . , bk ∈ N such that
S = a1 b1 + . . . + ak bk .
Proof. It is a folklore and can be easily proved by induction on k that there exist some
Pk
coefficients b1 , . . . , bk ∈ Z such that gcd(a1 , . . . , ak ) = i=1 ai bi . Let us take such a solution
P
which minimises the sum i:bi <0 |bi |. We show that in this solution actually all the bi are
nonnegative. Assume otherwise and let bi < 0 for some i ∈ [1, k]. As S ≥ M 2 − M then for
some bj ∈ [1, k] we have bj ≥ M . Then substituting bj by bj − ai and bi by bi + aj we obtain
P
a solution with smaller i:bi <0 |bi |, contradiction.
◀
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:7–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

Linear functions Let a linear function Lin : Nd → N be of a form Lin(x1 , . . . , xd ) =
Pd
i=1 ni xi , with all the coefficients ni ∈ N+ . We call a linear function reduced if gcd(n1 , . . . , nd ) =
1, let us assume that Lin is reduced. Notice that each linear function is a reduced linear
function multiplied by some natural number. Let M = maxi∈[1,d] ni . The support of a linear
function supp(Lin) ⊆ [1, d] is the set of coordinates for which coefficient ni is nonzero. Let the
set of vectors zero(Lin) ⊆ Zd contain all the vectors nj ei − ni ej for i, j ∈ supp(Lin). Clearly
for any v ∈ zero(Lin) and any u ∈ Nd such that u + v ∈ Nd we have Lin(u + v) = Lin(u).
The following claim tells that set zero(Lin) in some way spans the set of vectors with the
same value of Lin in case it is big.
▷ Claim 8. For any u, v ∈ Nd such that Lin(u) = Lin(v) ≥ d * M 3 there is a sequence of
vectors u = x0 , x1 , . . . , xk = v ∈ Nd such that for all i ∈ [1, k] we have xi − xi−1 ∈ zero(Lin).
Proof. We prove the claim by induction on d. For d = 1 clearly u = v and there is nothing
to show. Let us assume that claim holds for d − 1, our aim is to prove it for d. Adding a
vector y ∈ zero(Lin) to xi−1 in order to obtain xi = xi−1 + y ∈ Nd we call a step. Clearly it
is enough find a sequence of steps from u to v. The plan is to apply first such a sequence of
steps from u to some u′ such that u′ [i] = v[i] for some i ∈ [1, d] and then show by induction
assumption that a sequence of steps from u′ to v exists as well.
P
For a subset of coordinates I ⊆ [1, d] and x ∈ Nd by LinI (x) we denote i∈I ni x[i]. As
Lin(v) ≥ d * M 3 there exists some j ∈ [1, d] such that Lin[1,d]\{j} (v) ≥ (d − 1)M 3 . Assume
wlog. that j = d, so
Lin[1,d−1] (v) ≥ (d − 1)M 3 .

(3)

We first aim to reach u′′ such that u′′ [d] − v[d] ≥ M 2 . Clearly until for some i ̸= d we
have u[i] ≥ M we can apply the step ni ed − nd ei to u and increase value of u[d]. We
Pd−1
continue this until we reach some u′′ with i=1 u′′ [i] < (d − 1)M . This is indeed possible as
Pd−1 ′′
′′
i=1 u [i] ≥ (d − 1)M implies that for some i ̸= d we have u [i] ≥ M . Then we have that
Lin[1,d−1] (u′′ ) < (d − 1)M 2 as M = maxi∈[1,d] ni , so nd u′′ [d] > dM 3 − (d − 1)M 2 . By (3) we
have nd v[d] ≤ dM 3 −(d−1)M 3 = M 3 . Therefore nd (u′′ [d]−v[d]) > (d−1)(M 3 −M 2 ) and thus
Pd−1
u′′ [d]−v[d] ≥ (d−1)(M 2 −M ) ≥ M 2 −M . By Claim 7 we have that u′′ [d]−v[d] = i=1 ni xi
for some xi ∈ N. Therefore in order to obtain u′ such that u′ [d] = v[d] for each i ∈ [1, d − 1]
we apply for each i ∈ [1, d − 1] exactly xi number of times the step nd ei − ni ed to u′′ . Notice
that all the other coordinates beside the d-th one increase, so these steps indeed lead to
vectors with nonnegative coordinates. As Lini∈[1,d−1] (u′ ) = Lini∈[1,d−1] (v) ≥ (d − 1)M 3 we
apply the induction assumption to show that indeed starting from u′ one can reach v by a
sequence of steps. This finishes the proof.
◀
Modification of a VASS For two linear functions Lin1 , Lin2 ∈ Nd → N and a VASS V with
q
state q we define VASS VLin
as V with additional transitions those aim is to be able to
1 ,Lin2
Pd
Lin1 (*)
increase the ratio Lin2 (*) , but never decrease it. Let Lin1 (x1 , . . . , xd ) = i=1 ni,1 xi and let
Pd
q
Lin2 (x1 , . . . , xd ) = i=1 ni,2 xi . The set of states of VLin
is inherited from V similarly
1 ,Lin2
as the set of transitions of V . We additionally add to V transitions of the form (q, v, q),
which are loops in the state q ∈ Q, of the following form:
1. for each coordinate i ∈ supp(Lin2 ) add a loop which decreases coordinate i by one
2. for each coordinate i ̸∈ supp(Lin1 ) ∪ supp(Lin2 ) add two loops: one, which increases and
one which decreases coordinate i by one
3. for each v ∈ zero(Lin1 ) and each v ∈ zero(Lin2 ) add a loop with effect v.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:8–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

q
Notice that condition 2 means that we can freely modify in VLin
the coordinates
1 ,Lin2
outside supp(Lin1 ) ∪ supp(Lin2 ) We are ready to state the theorem.

▶ Theorem 9. Let Lin1 , Lin2 : Nd → N be two reduced linear functions with disjoint supports.
Let V = (Q, T ) be a d-VASS, q ∈ Q be its state, s, t ∈ Q × Nd be two its configurations and
R ∈ Q be a rational number. Assume that
(1) for each v ∈ Nd if s −→ q(v) then Lin1 (v) ≥ R * Lin2 (v),
(2) for each u, v ∈ Nd if q(v) −→ t + u then Lin1 (v − u) ≤ R * Lin2 (v − u),
(3) each run from state(s) to state(t) traverses through a configuration c with state(c) = q,
(4) the set {projI (v) | s −→ q(v) −→ t} is infinite, where I = supp(Lin1 ) ∪ supp(Lin2 ).
q
Then for any i ∈ supp(Lin2 ) there is no run from s to t + ei in V ′ = VLin
and each
1 ,Lin2
separator for (V ′ , s, t+ei ) contains a period p such that projI (p) ̸= 0 and Lin1 (p) = R*Lin2 (p).
Proof. Due to condition (4) in the theorem statement there exists an infinite sequence of
vectors vi ∈ Nd with projI (vi ) pairwise different such that s −→ q(vi ) −→ t. Let ρ1i be the
corresponding runs from s to q(vi ) and ρ2i be the corresponding runs from q(vi ) to t. Recall
that ⊴ is a well-quasi order and its modified version (denoted here ⊴′ ) with comparison on
sources instead of targets is also a well-quasi order. Therefore there exist i < j such that
ρ1i ⊴ ρ1j and ρ2i ⊴′ ρ2j . Let ∆ = vj − vi ∈ Nd . Clearly projI (∆) ̸= 0, as projI (vi ) ̸= projI (vj ).
Let a = vi . By Corollary 3 we get that for any n ∈ N there is a run of V from s to a + n∆. An
analogous reasoning with targets changed to sources shows that for any n ∈ N there is a run
in V from a + n∆ to t. Therefore for any n ∈ N we have s −→ q(a + n∆) −→ t. By conditions
(1) and (2) in the theorem statement we get that Lin1 (a + n∆) = R * Lin2 (a + n∆) for any
n ∈ N. In consequence Lin1 (∆) = R * Lin2 (∆). Notice that both Lin1 (∆), Lin2 (∆) > 0,
because projI (∆) ̸= 0.
We first show that s −→
̸ t + ei in V ′ . Assume towards a contradiction that s −→ t + ei .
By condition (3) we know that s −→ q(v) −→ t + ei for some v ∈ Nd . Observe first that
conditions (1) and (2) still hold for reachability relation defined in V ′ , as the added loops in
state q do not invalidate them. Notice that by condition (2) setting u = ei we have
Lin1 (v) = Lin1 (v − ei ) ≤ R * Lin2 (v − ei ) < R * Lin2 (v).
where the first equation follows from the fact that Lin1 (ei ) = 0. On the other hand s −→ q(v)
so by condition (1) we have Lin1 (v) ≥ R * Lin2 (v), which is in contradiction with the above
inequality. Thus indeed s −→
̸ t + ei .
Now we show that every separator for (V ′ , s, t + ei ) contains an appropriate period p.
This proof is quite similar to the proof of Theorem 4, but we need to deal with some more
S
S
technicalities. Consider a separator S = q∈Q q(Sq ) for (V ′ , s, t + ei ). Clearly Sq = j∈J Lj ,
where Lj are linear sets, needs to contain all the vectors a+n∆ for n ∈ N. Let L be one of the
finitely many linear sets Lj , which contains infinitely many vectors among {a + n∆ | n ∈ N}.
Let L = b + Np1 + . . . + Npk and P be the set of periods {p1 , . . . , pk }. We aim at showing
that L contains a period p such that projI (p) ̸= 0 and Lin1 (p) = R * Lin2 (p), namely
1 (∆)
Lin1 (p) * Lin2 (∆) = Lin2 (p) * Lin1 (∆), as R = Lin
Lin2 (∆) .
We first prove a claim analogous to Claim 5. This one is however much more challenging
to prove. For its purpose we have defined V ′ so intricately with the additional loops and in
the proof we use a nontrivial Claim 8.
▷ Claim 10. For each period p ∈ P we have Lin1 (∆) * Lin2 (p) ≤ Lin2 (∆) * Lin1 (p).
Proof. Similarly as in Claim 5 we intuitively mean to show that for all p ∈ P we have
Lin1 (∆)
Lin1 (p)
Lin2 (∆) ≤ Lin2 (p) , but this is not a formally correct statement as it may be that Lin2 (p) = 0.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:9–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

Assume towards a contradiction that there is a period p such that Lin1 (∆) * Lin2 (p) >
Lin2 (∆) * Lin1 (p). Clearly a ∈ L, therefore also a + mp ∈ L for any m ∈ N. We aim at
showing that a + mp −→ a + n∆ + ei in V ′ for some m, n ∈ N. This would lead to a
contradiction as we know that a + n∆ −→ t, so also a + n∆ + ei −→ t + ei . Therefore
we would have that a + mp ∈ L and also a + mp −→ a + n∆ + ei −→ t + ei , which is a
contradiction with the definition of the separator.
Pd
Let Lin2 (x1 , . . . , xd ) = i=1 ni,2 xi and let M be the maximal coefficient in Lin2 , namely
M = maxi∈[1,d] ni,2 . We set m = dM 3 * Lin1 (∆) and n = dM 3 * Lin1 (p). Observe now that
Lin1 (a + mp) = Lin1 (a + n∆ + ei ). Indeed
Lin1 (a + mp) = Lin1 (v) + m * Lin1 (p) = Lin1 (v) + dM 3 * Lin1 (∆) * Lin1 (p)
= Lin1 (v) + n * Lin1 (∆) = Lin1 (a + n∆ + ei ),
as i ̸∈ supp(Lin1 ), so Lin1 (ei ) = 0. Let p = p1 + p2 + ptrash and ∆ = ∆1 + ∆2 + ∆trash ,
where p1 , ∆1 are positive only on supp(Lin1 ), p2 , ∆2 are positive only on supp(Lin2 ) and
ptrash , ∆trash are positive only outside supp(Lin1 ) ∪ supp(Lin2 ). First notice that thanks
to transitions in V ′ , which can freely modify coordinates outside supp(Lin1 ) ∪ supp(Lin2 )
we can assume wlog. that ptrash = ∆trash = 0. Therefore by Claim 8 and because Lin1
is reduced there is a run in V ′ from a + mp = a + mp1 + mp2 to a + n∆1 + mp2 , as
Lin1 (a + mp1 ) = Lin1 (a + n∆1 ) ≥ dM 3 ≥ |supp(Lin1 )| * M 3 . We claim now that
Lin2 (mp2 ) = Lin2 (n∆2 + ei + vtrash ) ≥ dM 3 ≥ |supp(Lin2 )| * M 3

(4)

for some vtrash positive only on supp(Lin2 ). This would finalise the argument as then
a + n∆1 + mp2 −→ a + n∆1 + n∆2 + ei + vtrash −→ a + n∆1 + n∆2 + ei = a + n∆ + ei ,
where the first relation −→ follows from Claim 8 and fact that Lin2 is reduced and the second
one follows from existence of transitions in V ′ which arbitrarily decrease any coordinate in
supp(Lin2 ).
Recall first that Lin1 (∆) * Lin2 (p) > Lin2 (∆) * Lin1 (p), so
Lin1 (∆) * Lin2 (p) − Lin2 (∆) * Lin1 (p) ≥ 1
and that we set m = dM 3 * Lin1 (∆) and n = dM 3 * Lin1 (p). Therefore
Lin2 (mp2 ) − Lin2 (n∆2 ) = dM 3 * Lin1 (∆) * Lin2 (p) − dM 3 * Lin2 (∆) * Lin1 (p) ≥ dM 3 .
So Lin2 (mp2 ) − Lin2 (n∆2 + ei ) ≥ dM 3 − M ≥ M 2 − M . Thus by Claim 7 there exist some
Pd
b1 , . . . , bd ∈ N such that j=1 nj,2 bj = Lin2 (mp2 ) − Lin2 (n∆2 + ei ). Hence Lin2 (mp2 ) =
Pn
Pn
Lin2 (n∆2 + ei + j=1 bj ej ) ≥ dM 3 and we can set vtrash = j=1 bj ej thus satisfying (4)
and finishing the proof of the claim.
◀
Now we exactly follow the lines of the proof of Claim 5. Let P∅ be the set of all periods
in P for which projI (p) = ∅ and P̸=∅ = P \ P∅ . Recall that we want to show existence
of a period p ∈ P̸=∅ fulfilling Lin1 (p) * Lin2 (∆) = Lin2 (p) * Lin1 (∆). Assume towards a
contradiction that there is no such period. Therefore by Claim 10 each period p ∈ P̸=∅
satisfies Lin1 (∆) * Lin2 (p) < Lin2 (∆) * Lin1 (p). In particular for each period p ∈ P̸=∅ we have
Lin1 (p) > 0, thus we can equivalently write that for all p ∈ P̸=∅ it holds
Lin2 (p)
Lin2 (∆)
<
.
Lin1 (p)
Lin1 (∆)
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:10–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

Let F be the maximal value of

Lin2 (p)
Lin1 (p)

for p ∈ P̸=∅ , clearly

Lin2 (∆)
Lin1 (∆)

> F , so

Lin2 (∆) > F * Lin1 (∆).

(5)

Recall now that for arbitrary big n we have that a + n∆ ∈ b + Np1 + . . . + Npk , thus
(a − b) + n∆ ∈ Np1 + . . . + Npk . Let v = a − b. We have then that
(Lin1 (v + n∆), Lin2 (v + n∆)) =

X

ni (Lin1 (p), Lin2 (p)).

pi ∈P̸=∅

By the above we know that
Lin2 (v + n∆)
≤ F,
Lin1 (v + n∆)
as v + n∆ is a positive linear combination of periods from P , for each p ∈ P∅ we have
2 (p)
Lin1 (p) = Lin2 (p) = 0 and for each p ∈ P̸=∅ we have Lin
Lin1 (p) ≤ F . Therefore
Lin2 (v) + nLin2 (∆) ≤ F (Lin1 (v) + nLin1 (∆))
and equivalently
n(Lin2 (∆) − F * Lin1 (∆)) ≤ F * Lin1 (v) − Lin2 (v).
By (5) we have that Lin2 (∆) − F * Lin1 (∆) > 0 therefore
n≤

F * Lin1 (v) − Lin2 (v)
.
Lin2 (∆) − F * Lin1 (∆)

This is in contradiction with the fact that n can be arbitrarily big and finishes the proof.

◀

We remark one more time that Theorem 9 is not needed for our applications. The
motivation behind stating and proving this theorem is to prepare for possible future applications and explore limits of our approach. In the proof of Theorem 9 one needs to use two
additional techniques, which were not needed to prove Theorem 4: well quasi-order on runs
and construction of modified VASS with auxiliary transitions. Moreover we believe that the
statement of Theorem 9 is more robust and looks more natural than Theorem 4.

4

Applications

In this section we show how Theorem 4 can be used to obtain lower bounds on the separator
size. In Section 4.1 we prove that using a construction from [5] one can obtain a 4-VASS
with separators of at least doubly-exponential size. In Section 4.2 we show that there exist
VASSes with separators of arbitrary high elementary size of a special shape. Existence of
separators of arbitrary high elementary size is an easy consequence of Tower-hardness of
VASS reachability problem, we provide in Theorem 13 a concrete instance of such a separator.
It is not a big contribution, but the aim of proving Theorem 13 is rather to illustrate that
our techniques can be quite easily applied to many existing VASS examples.

4.1

Doubly-exponential separator in a 4-VASS

The aim of this section is to show the following theorem.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:11–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

▶ Theorem 11. There exists a family of binary 4-VASSes (Vn )n∈N of size O(n3 ) such that
for some configurations sn , tn of Vn with norm(sn ), norm(tn ) ≤ 1 such that sn does not reach
tn the smallest separator for (Vn , sn , tn ) is of doubly-exponential size wrt. n.
The rest of this section is devoted to the proof of Theorem 11. Our construction is
based on the construction of a family of binary 4-VASSes (Un )n∈N with shortest run of
doubly-exponential length, which is described in Section 5 in [5]. The proof follows a very
natural line and is not a big challenge. It boils down to performing a small modification
to 4-VASSes from [5] in order to assure conditions of Theorem 4 and then checking that
indeed these conditions are satisfied. We sketch here the idea behind the construction of the
mentioned family of 4-VASSes only into such an extend that we can explain the proof of
Theorem 11, for details we refer to [5]. The whole construction is based on the following
lemma (Lemma 12 in [5]).
▶ Lemma 12. For each n ≥ 1 there are n rational numbers
1 < f1 < . . . < fn = 1 +

1
4n

of description size bounded by 4n
n

2

f = (fn )2 * . . . * (f2 )2 * (f1 )2
is bounded by 42(n

2

+n)

2

+n

, such that the description size of f defined as

1

(6)

.

The VASSes Un are constructed as follows. Valuation of the four counters (x1 , x2 , x3 , x4 )
in the distinguished initial state is initially 04 , the run is accepting if it finishes in the
distinguished final state also with valuation 04 . Each run of Un consists of n + 2 phases: the
initial phase, n phases corresponding to fractions fn , fn−1 , . . . , f2 , f1 , respectively and the
final phase. In each run after the initial phase the counter valuation is equal to (N, N, 0, 0)
for some nondeterministically guessed value N ∈ N. In every accepting run the phase
corresponding to the fraction fi results only in multiplying the second counter x2 by a value
i
fi2 . Therefore in such an accepting run counter valuation after phases corresponding to
fractions fn , . . . , fi is the following
n

i

(x1 , x2 , x3 , x4 ) = (N, N * fn2 * . . . * fi2 , 0, 0).
In particular after all the n phases corresponding to fractions the second counter is equal to
n

1

N * fn2 * . . . * f12 = N * f,
where the equality follows from Lemma 12. Let qi be the state of Un after the initial phase,
n − i phases corresponding to fractions fn , . . . , fi+1 and just before the phase corresponding
to fraction fi (in the case when i > 0). It is important that due to Claim 15 in [5] any
n
i
reachable configuration of the form qi (x1 , x2 , x3 , x4 ) satisfies x2 ≤ fn2 * . . . * fi2 * x1 . In
particular for any reachable configuration q0 (x1 , x2 , x3 , x4 ) we have that x2 ≤ f * x1 , as
n
1
f = fn2 * . . . * f12 . Let f = ab . In the final phase the transition with the effect (−b, −a, 0, 0)
is applied in a loop. One can easily see that in order to reach counter values 04 after the
final phase we need to have in the state q0 values satisfying the equality x2 = f * x1 . Similarly
n
any configuration qn−1 (x1 , x2 , x3 , x4 ) on an accepting run needs to satisfy x2 = fn2 * x1 .
n
Let fi = abii for all i ∈ [1, n]. Then in any accepting run x1 needs to be divisible by b2n ,
which is a doubly-exponential number wrt. n. This forces any accepting run of Un to be
doubly-exponential.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:12–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

We slightly modify 4-VASSes Un in order to obtain 4-VASSes Vn , which fulfil conditions
of Theorem 4. VASS Vn is obtained from Un by adding at the end of Un two instructions:
1) decrease of x2 by 1; and then 2) a loop, which decreases x2 by an arbitrary nonnegative
number. We first show that Vn indeed satisfies conditions of Theorem 4 and then we argue
how this finishes the proof of Theorem 11. Let qin be the initial state of VASS Un , qout
be its final state and qlast be the state after the final phase, but before applying the above
Qn
i
mentioned decreases of x2 . We set sn = qin (04 ) and tn = qout (04 ). Let N = i=1 bi2 . We set
n
∆ = (N, N * fn2 , 0, 0) ∈ N4 and fix state q = qn−1 . We claim that VASS Vn together with
two configurations sn and tn , state q and vector ∆ satisfies conditions of Theorem 4.
n
Condition (1) is satisfied trivially as ∆ = (N, N * fn2 , 0, 0). In order to see that (2) is
satisfied recall that if Vn reaches q0 (x1 , x2 , x3 , x4 ) then we have that x2 ≤ ab x1 . In the final
phase we subtract in the loop vector (b, a, 0, 0), but it does not change this inequality. Finally
subtracting at least 1 at x2 implies that any reachable configuration qout (x1 , x2 , x3 , x4 ) satisfies
x2 + 1 ≤ ab * x1 . This is not true for x1 = x2 = 0, which shows that condition (2) is indeed
satisfied. Observe now that for each k ∈ N configuration qn (kN, kN, 0, 0) after the initial
n
phase is reachable from sn . Thus also configuration qn−1 (kN, kN * fn2 , 0, 0) is reachable
n
from sn if we multiply the second counter by fn2 , which proves condition (3). Observe also
n
that starting in a configuration qn−1 (kN, kN * fn2 , 0, 0) one can reach valuation qlast (04 )
before the decreases of x2 . Therefore after adding e2 = (0, 1, 0, 0) to both sides we get that
n
qn−1 (kN, kN * fn2 + 1, 0, 0) −→ qlast (0, 1, 0, 0) −→ tn for any k ∈ N. Because of an option
n
of decreasing x2 many times in qlast we get that qn−1 (kN, kN * fn2 + l, 0, 0) −→ tn for any
k, l ≥ 1, which equivalent to the condition (4).
Therefore by Theorem 4 we have that each separator for (Vn , sn , tn ) contains a period
  2n
∆ * r ∈ N4 for some r ∈ Q. Let ∆ * r = (x1 , x2 , 0, 0) ∈ N4 . We know that x2 = x1 * abnn
,
n

so in order for x2 ∈ N we need to have b2n | x1 . This implies that x1 is doubly-exponential
with respect to n. Therefore size of the period ∆ * r and thus size of the separator is
doubly-exponential with respect to n.

4.2

Tower size separators

In this section we show the following result.
▶ Theorem 13. There exists a family of VASSes (Vn )n∈N of size polynomial wrt. n such
that for some configurations sn , tn of Vn with norm(sn ) = norm(tn ) = 0 the following is true:
sn −→ tn , but the shortest run is n-fold exponential,
sn −→
̸ tn + e for some elementary vector e and each separator for (Vn , sn , tn + e) is of at
least n-fold exponential size.
The rest of this section is dedicated to prove Theorem 13. Construction of VASSes Vn
is based on constructions in [4], but we do not follow exactly [4] in order to avoid some
technicalities and simplify the construction. As the construction [4] is pretty involved we
decided only to sketch the intuition behind the constructed VASSes and use many of its
properties without a detailed explanation. The main goal of this section is to provide an
intuition why Theorem 4 is indeed applicable to that case, for details of the construction
we refer to the original paper [4]. Essentially speaking Theorem 4 is applicable to VASSes
in which the configurations on the accepting run are distinguished from the others once by
keeping some specific ratio of counter values. The bigger the description size of the ratio the
bigger is the separator. In VASSes from [4] the description size is n-fold exponential, which
implies the lower bound on the size of separators.
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:13–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

We say that a counter is B-bounded if its value is upper bounded by B along the whole
run. In [4] counters are assured to be B-bounded (for various values of B) in the following
way. In order to guarantee that counter x initially equal to 0 is B-bounded we introduce
another counter x̄ which is initialised to B and an invariant a + ā = B is kept throughout
the whole run. The construction of [4] strongly relies on the fact that having a triple
(x, y, z) = (B, C, BC) one can simulate C/2 zero-tests for a B-bounded counter. One zero-test
for counter a is realised as follows. We decrease y by 2. Then we enter two loops, the first one
with the effect (−1, 1, −1) on counters (a, ā, z) and the second one with the effect (1, −1, −1)
on the same counters. It is easy to see that for a B-bounded counter a the maximal possible
decrease on z after these two loops is equal to 2B and it can only be realised if before and
after the loops we have (a, ā) = (0, B).
Let 3!n be the number 3 followed by n applications of the factorial function. For
example 3!1 = 3, 3!2 = 6 and 3!3 = 720. Roughly speaking VASS in [4] consists of a
sequence of n gadgets, such that in every accepting run they compute triples of the form
(3!i , ki , 3!i * ki ) for some nondeterministically guessed values ki ∈ N. The first gadget B
computes triple (3, k1 , 3 * k1 ) in a very easy way: after increasing its counters by (3, 0, 0) it
fires a nondeterministically guessed number k1 of times a loop with the effect equal to (0, 1, 3).
Next we have a sequence of n − 1 gadgets F, the i-th one inputing a triple (3!i , ki , 3!i * ki )
and outputting a triple (3!i+1 , ki+1 , 3!i+1 * ki+1 ) on some other set of three counters. It is
important to mention that correct value of the output triple requires that after the run values
of the input triple are all zero. The last triple (3!n , kn , 3!i * kn ) is used in [4] to simulate
3!n -bounded counters of a counter automaton. Here however we modify this construction in
order to obtain VASSes Vn , which fulfil the conditions of Theorem 13. As all the triples use
different counters the presented VASS has at least dimension 3n. In the original construction
of [4] some of the counters were actually reused in order to decrease the dimension. Here we
allow for a wasteful use of counters, this however do not change the idea of the construction.
The family of VASSes Vn is defined as follows. We distinguish an initial state qin of Vn
and a final state qout of Vn . For i ∈ [1, n] let qi be the state after the i-th gadget. From
the above description we get that in state qi valuation of some three counters is equal to
(3!i , ki , 3!i * ki ). Let us denote these counters (xi , yi , zi ). Thus in qn we reach counter values
(xn , yn , zn ) = (3!n , kn , 3!n * kn ) for some kn ≥ 0. Then after state qn we define a state qdec in
which we decrease values of yn and zn by applying some nonzero number of zero-tests for
3!n -bounded counters. This operation can be seen as a loop decreasing counters (xn , yn , zn )
by (0, 1, 3!n ), but of course subtracting (0, 1, 3!n ) is not realised by a single transition, but by
some smaller sub-gadget of our VASS. Then we go to a state qout in which we can decrease
in a loop the counter xn and as well the counter yn . We define sn = qin (0d ) and tn = qout (0d )
for an appropriate dimension d. We set a vector e to be zero on all the coordinates beside yn
on which it is set to be one. We claim that Vn with configurations sn , tn and an elementary
vector e satisfy conditions Theorem 13. It is easy to see (assuming all the above remarks about
the construction of [4]) that all the accepting runs need to traverse through a configuration
qn (3!n , k, 3!n * k) for some k ≥ 1, which implies that all the accepting runs have at least n-fold
exponential length. It therefore remains to show the second point of Theorem 13, we apply
Theorem 4 for that purpose.
As counters xn , yn and zn are important let us assume wlog. that they correspond to the
first three coordinates in our notation, respectively. Let ∆ = (0, 1, 3!n , 0d−3 ) ∈ Nd , namely
∆[i] = 0 for all i ̸∈ {yn , zn }, ∆[yn ] = 1 and ∆[zn ] = 3!n . Properties of Vn can be summarised
in the following claim, which can be derived from [4].
▷ Claim 14. If sn −→ qdec (x, y, z, 0d−3 ) then x = 3!n and y ≤ 3!n z. Moreover for any y ∈ N
© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:14–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

we have sn −→ qdec (3!n , y, 3!n * y, 0d−3 ).
Now we aim at showing that VASS Vn together with configurations sn , tn + e, vector
∆ and state qdec fulfils conditions of Theorem 4. It is immediate to see that condition (1)
is satisfied as only second and third coordinates in ∆ are nonzero (we allow for reordering
the coordinates in Theorem 4 without loss of generality). In order to show (2) we rely
on Claim 14. We have tn + e = qout (0, 1, 0, 0d−3 ), thus if sn −→ tn + e we need to have
sn −→ qdec (x, y, 0, 0d−3 ) −→ tn + e for some y > 0. This is however a contradiction with
Claim 14, as then y * 3!n > 0. By Claim 14 we also immediately derive condition (3). To
show condition (4) notice that because of the loop in qdec of effect (0, −1, −3!n ) on counters
(xn , yn , zn ) we have
qdec (0, k+l, k*3!n , 0d−3 ) −→ qdec (0, l, 0d−2 ) −→ qout (0, l−1, 0d−2 ) −→ qout (0, 1, 0d−2 ) = tn +e
for any k, l ≥ 1. This shows that indeed Theorem 4 can be applied to Vn . Thus each
separator for (Vn , sn , tn + e) contains a period of a form (r, r * 3!n , 0, 0d−3 ) ∈ N. As r ∈ N
the number r * 3!n is n-fold exponential and thus the size of any separator for (Vn , sn , tn + e)
is n-fold exponential, which finishes the proof of Theorem 13.

Acknowledgements
We thank Sławomir Lasota and Michał Pilipczuk for inspiring discussions.
References
1

2
3

4

5

6
7

8
9
10
11

Michael Blondin, Alain Finkel, Stefan Göller, Christoph Haase, and Pierre McKenzie. Reachability in two-dimensional vector addition systems with states is pspace-complete. In Proceedings
of LICS 2015, pages 32–43, 2015.
Lorenzo Clemente, Wojciech Czerwinski, Slawomir Lasota, and Charles Paperman. Separability
of reachability sets of vector addition systems. CoRR, 2016.
Lorenzo Clemente, Wojciech Czerwinski, Slawomir Lasota, and Charles Paperman. Separability
of reachability sets of vector addition systems. In Proceedings of STACS 2017, pages 24:1–24:14,
2017.
Wojciech Czerwinski, Slawomir Lasota, Ranko Lazic, Jérôme Leroux, and Filip Mazowiecki.
The reachability problem for petri nets is not elementary. In Proceedings of STOC 2019, pages
24–33, 2019.
Wojciech Czerwinski, Slawomir Lasota, Ranko Lazic, Jérôme Leroux, and Filip Mazowiecki.
Reachability in fixed dimension vector addition systems with states. In Proceedings of CONCUR
2020, pages 48:1–48:21, 2020.
Wojciech Czerwiński and Łukasz Orlikowski. Reachability in vector addition systems is
ackermann-complete. CoRR, abs/2104.13866, 2021.
Matthias Englert, Ranko Lazic, and Patrick Totzke. Reachability in two-dimensional unary
vector addition systems with states is nl-complete. In Proceedings of LICS '16, pages 477–484,
2016.
Petr Jancar. Decidability of a temporal logic problem for petri nets. Theor. Comput. Sci.,
74(1):71–93, 1990.
S. Rao Kosaraju. Decidability of reachability in vector addition systems (preliminary version).
In Proceedings of STOC '82, pages 267–281, 1982.
Jean-Luc Lambert. A structure to decide reachability in Petri nets. Theor. Comput. Sci.,
99(1):79–104, 1992.
Jérôme Leroux. The general vector addition system reachability problem by Presburger
inductive invariants. In Proceedings of LICS '09, pages 4–13, 2009.

© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:15–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

12
13
14
15
16
17
18

Jérôme Leroux. The reachability problem for petri nets is not primitive recursive. CoRR,
abs/2104.12695, 2021.
Jérôme Leroux and Sylvain Schmitz. Demystifying reachability in vector addition systems. In
Proceedings of LICS 2015, pages 56–67, 2015.
Jérôme Leroux and Sylvain Schmitz. Reachability in vector addition systems is primitiverecursive in fixed dimension. In Proceedings of LICS 2019, pages 1–13, 2019.
Richard J. Lipton. The reachability problem requires exponential space. Technical report,
Yale University, 1976.
Ernst W. Mayr. An algorithm for the general Petri net reachability problem. In Proceedings
of STOC'81, pages 238–246, 1981.
Charles Rackoff. The covering and boundedness problems for vector addition systems. Theor.
Comput. Sci., 6:223–231, 1978.
Sylvain Schmitz. Complexity hierarchies beyond elementary. ACM Trans. Comput. Theory,
8(1):3:1–3:36, 2016.

© Wojciech Czerwiński, Adam Jędrych;
licensed under Creative Commons License CC-BY 4.0
42nd Conference on Very Important Topics (CVIT 2016).
Editors: John Q. Open and Joan R. Access; Article No. 23; pp. 23:16–23:16
Leibniz International Proceedings in Informatics
Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl Publishing, Germany

